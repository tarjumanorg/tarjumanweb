---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { formatDate } from "../../../utils/dateUtils";
import type {
    ApiOrderResponse,
} from "../../../utils/storageUtils";
import type { SignedFileInfo } from '../../../schemas/order.schema';

const { orderId } = Astro.params;
let order: ApiOrderResponse | null = null;
let errorMessage: string | null = null;
let orderIdNum: number | null = null;

if (!orderId || isNaN(Number(orderId))) {
    errorMessage = "Invalid Order ID provided in the URL.";
} else {
    orderIdNum = Number(orderId);
    try {
        console.log(
            `Admin Detail Page: Fetching order ${orderIdNum} server-side...`,
        );
        const response = await fetch(
            `${Astro.url.origin}/api/admin/orders/${orderIdNum}`,
            {
                headers: {
                    Cookie: Astro.request.headers.get("cookie") || "",
                },
            },
        );

        if (!response.ok) {
            const errorData = await response
                .json()
                .catch(() => ({ error: `HTTP error ${response.status}` }));
            errorMessage = `Failed to fetch order details: ${response.status} - ${errorData.error || "Unknown API error"}`;
            if (response.status === 404)
                errorMessage = `Order with ID ${orderIdNum} not found.`;
            else if (response.status === 401 || response.status === 403)
                errorMessage = "Unauthorized or Forbidden.";
            else {
                errorMessage = `Failed to load order details (${response.status}). Please try again later.`;
            }
        } else {
            order = (await response.json()) as ApiOrderResponse;
            console.log(
                `Admin Detail Page: Successfully fetched order ${orderIdNum} with file info.`,
            );
        }
    } catch (e: any) {
        console.error(
            `Admin Detail Page: Error fetching order ${orderIdNum}:`,
            e,
        );
        errorMessage = `An unexpected error occurred while fetching order details: ${e.message}`;
    }
}
---

<AdminLayout title={order ? `Order #${order.id} Details` : "Order Details"}>
    <a href="/admin/orders">‚Üê Back to All Orders</a>

    {errorMessage && <p class="error-message">{errorMessage}</p>}

    {
        order && orderIdNum && (
            <div class="order-details-grid">
                <section class="order-info">
                    <h2>Order Information</h2>
                    <p>
                        <strong>Order ID:</strong> {order.id}
                    </p>
                    <p>
                        <strong>Created At:</strong>{" "}
                        {formatDate(order.created_at)}
                    </p>
                    <p>
                        <strong>User ID:</strong> {order.user_id}
                    </p>
                    <p>
                        <strong>Orderer Name:</strong> {order.orderer_name}
                    </p>
                    <p>
                        <strong>Phone:</strong> {order.phone || "N/A"}
                    </p>
                    <p>
                        <strong>Package Tier:</strong>{" "}
                        {order.package_tier || "N/A"}
                    </p>
                    <p>
                        <strong>Is Disadvantaged:</strong>{" "}
                        {order.is_disadvantaged ? "Yes" : "No"}
                    </p>
                    <p>
                        <strong>Is School:</strong>{" "}
                        {order.is_school ? "Yes" : "No"}
                    </p>
                    <p>
                        <strong>Certificate:</strong>
                        {order.certificate_info?.signedUrl ? (
                            <a
                                href={order.certificate_info.signedUrl}
                                target="_blank"
                                rel="noopener noreferrer"
                            >
                                {order.certificate_info.filename ||
                                    "Certificate File"}
                            </a>
                        ) : order.certificate_info?.filename ? (
                            <span>
                                {order.certificate_info.filename} (Link Error)
                            </span>
                        ) : (
                            "N/A"
                        )}
                    </p>
                    <p>
                        <strong>Uploaded Original Files:</strong>
                    </p>
                    {order.uploaded_files_info &&
                    Array.isArray(order.uploaded_files_info) &&
                    order.uploaded_files_info.length > 0 ? (
                        <ul>
                            {order.uploaded_files_info.map((fileInfo, index) =>
                                fileInfo ? (
                                    <li>
                                        {fileInfo.signedUrl ? (
                                            <a
                                                href={fileInfo.signedUrl}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                            >
                                                {fileInfo.filename ||
                                                    `File ${index + 1}`}
                                            </a>
                                        ) : (
                                            <span>
                                                {fileInfo.filename ||
                                                    `File ${index + 1}`}{" "}
                                                (Link Error)
                                            </span>
                                        )}
                                    </li>
                                ) : (
                                    <li>
                                        File {index + 1} (Error generating link)
                                    </li>
                                ),
                            )}
                        </ul>
                    ) : (
                        <p>
                            No original files uploaded or links could not be
                            generated.
                        </p>
                    )}
                    <p>
                        <strong>Current Translated File:</strong>
                        <span id="translated-file-link-container">
                            {order.translated_file_info?.signedUrl ? (
                                <a
                                    href={order.translated_file_info.signedUrl}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    data-translated-link
                                >
                                    {order.translated_file_info.filename ||
                                        "Translated File"}
                                </a>
                            ) : order.translated_file_info?.filename ? (
                                <span data-translated-link>
                                    {order.translated_file_info.filename} (Link
                                    Error)
                                </span>
                            ) : (
                                <span data-translated-link>None</span>
                            )}
                        </span>
                    </p>
                </section>

                <section class="order-update">
                    <h2>Update Order</h2>
                    <form data-update-form data-order-id={orderIdNum}>
                        <div class="form-group">
                            <label for="status">Status:</label>
                            <select id="status" name="status">
                                <option
                                    value="pending"
                                    selected={order.status === "pending"}
                                >
                                    Pending
                                </option>
                                <option
                                    value="processing"
                                    selected={order.status === "processing"}
                                >
                                    Processing
                                </option>
                                <option
                                    value="completed"
                                    selected={order.status === "completed"}
                                >
                                    Completed
                                </option>
                                <option
                                    value="cancelled"
                                    selected={order.status === "cancelled"}
                                >
                                    Cancelled
                                </option>
                                <option value="" selected={!order.status}>
                                    N/A
                                </option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="page_count">Page Count:</label>
                            <input
                                type="number"
                                id="page_count"
                                name="page_count"
                                value={order.page_count ?? ""}
                                min="0"
                                step="1"
                            />
                        </div>
                        <div class="form-group">
                            <label for="total_price">
                                Total Price (smallest unit, e.g., cents):
                            </label>
                            <input
                                type="number"
                                id="total_price"
                                name="total_price"
                                value={order.total_price ?? ""}
                                min="0"
                            />
                        </div>
                        <button type="submit">Update Order</button>
                        <div data-update-status class="status-message" />
                    </form>
                </section>

                <section class="order-upload">
                    <h2>Upload Translated File</h2>
                    <form data-upload-form data-order-id={orderIdNum}>
                        <div class="form-group">
                            <label for="translated_file">Select File:</label>
                            <input
                                type="file"
                                id="translated_file"
                                name="translated_file"
                                required
                            />
                        </div>
                        <button type="submit">Upload Translation</button>
                        <div data-upload-status class="status-message" />
                    </form>
                </section>
            </div>
        )
    }
</AdminLayout>

<script>
    import type { SignedFileInfo } from "../../../schemas/order.schema";
    import {
        handleOrderUpdateSubmit,
        handleTranslationUploadSubmit,
    } from "../../../scripts/adminOrderHandlers";

    function updateTranslatedFileDisplay(
        fileInfo: SignedFileInfo | undefined | null,
    ) {
        const container = document.getElementById(
            "translated-file-link-container",
        );
        if (!container) return;

        if (fileInfo?.signedUrl && fileInfo.filename) {
            container.innerHTML = `<a href="${fileInfo.signedUrl}" target="_blank" rel="noopener noreferrer" data-translated-link>${fileInfo.filename}</a>`;
        } else if (fileInfo?.filename) {
            container.innerHTML = `<span data-translated-link>${fileInfo.filename} (Link Error)</span>`;
        } else {
            container.innerHTML = `<span data-translated-link>None</span>`;
        }
    }

    const updateForm = document.querySelector(
        "[data-update-form]",
    ) as HTMLFormElement | null;
    const updateStatusEl = document.querySelector(
        "[data-update-status]",
    ) as HTMLElement | null;
    const uploadForm = document.querySelector(
        "[data-upload-form]",
    ) as HTMLFormElement | null;
    const uploadStatusEl = document.querySelector(
        "[data-upload-status]",
    ) as HTMLElement | null;
    const fileInput = document.getElementById(
        "translated_file",
    ) as HTMLInputElement | null;

    if (updateForm && updateStatusEl) {
        updateForm.addEventListener("submit", (event) => {
            handleOrderUpdateSubmit(
                event,
                updateForm,
                updateStatusEl,
                updateTranslatedFileDisplay,
            );
        });
    } else {
        console.warn("Update form elements (form or status div) not found.");
    }

    if (uploadForm && uploadStatusEl && fileInput) {
        uploadForm.addEventListener("submit", (event) => {
            handleTranslationUploadSubmit(
                event,
                uploadForm,
                uploadStatusEl,
                fileInput,
                updateTranslatedFileDisplay,
            );
        });
    } else {
        console.warn(
            "Upload form elements (form, status div, or file input) not found.",
        );
    }
</script>

<style>
    button:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }

    .status-message {
        margin-top: 1rem;
        padding: 0.75rem;
        border-radius: 4px;
        display: none;
        font-weight: bold;
        text-align: center;
        border: 1px solid transparent;
    }

    .status-message.status-success {
        background-color: #d4edda;
        color: #155724;
        border-color: #c3e6cb;
        display: block;
    }

    .status-message.status-error {
        background-color: #f8d7da;
        color: #721c24;
        border-color: #f5c6cb;
        display: block;
    }

    .status-message.status-info {
        background-color: #e2e3e5;
        color: #383d41;
        border-color: #d6d8db;
        display: block;
    }
</style>
