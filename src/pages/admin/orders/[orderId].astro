---
import AdminLayout from "../../../layouts/AdminLayout.astro";

import type { Order } from "../../../types/types";

const formatDate = (dateString: string | null | undefined) => {

    if (!dateString) return 'N/A';
    try {
        return new Intl.DateTimeFormat('en-US', { dateStyle: 'medium', timeStyle: 'short' }).format(new Date(dateString));
    } catch {
        return dateString; 
    }
}

const { orderId } = Astro.params;
let order: any = null; 
let errorMessage: string | null = null;
let orderIdNum: number | null = null;

if (!orderId || isNaN(Number(orderId))) {
    errorMessage = "Invalid Order ID provided in the URL.";
} else {
    orderIdNum = Number(orderId);
    try {
        console.log(`Admin Detail Page: Fetching order ${orderIdNum} server-side (expecting signed URLs)...`);
        const response = await fetch(`${Astro.url.origin}/api/admin/orders/${orderIdNum}`, {
            headers: {
                'Cookie': Astro.request.headers.get('cookie') || ''
            }
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ error: `HTTP error ${response.status}` }));
            errorMessage = `Failed to fetch order details: ${response.status} - ${errorData.error || 'Unknown API error'}`;
            if (response.status === 404) errorMessage = `Order with ID ${orderIdNum} not found.`;
            else if (response.status === 401 || response.status === 403) errorMessage = "Unauthorized or Forbidden.";
        } else {
            order = await response.json(); 
            console.log(`Admin Detail Page: Successfully fetched order ${orderIdNum} with file info.`);
        }

    } catch (e: any) {
        console.error(`Admin Detail Page: Error fetching order ${orderIdNum}:`, e);
        errorMessage = `An unexpected error occurred while fetching order details: ${e.message}`;
    }
}

---

<AdminLayout title={order ? `Order #${order.id} Details` : 'Order Details'}>
  <a href="/admin/orders">‚Üê Back to All Orders</a>

  {errorMessage && <p class="error-message">{errorMessage}</p>}

  {order && orderIdNum && (
    <div class="order-details-grid">
      {}
      <section class="order-info">
        <h2>Order Information</h2>
        {}
        <p><strong>Order ID:</strong> {order.id}</p>
        <p><strong>Created At:</strong> {formatDate(order.created_at)}</p>
        <p><strong>User ID:</strong> {order.user_id}</p>
        <p><strong>Orderer Name:</strong> {order.orderer_name}</p>
        <p><strong>Phone:</strong> {order.phone || 'N/A'}</p>
        <p><strong>Package Tier:</strong> {order.package_tier || 'N/A'}</p>
        <p><strong>Is Disadvantaged:</strong> {order.is_disadvantaged ? 'Yes' : 'No'}</p>
        <p><strong>Is School:</strong> {order.is_school ? 'Yes' : 'No'}</p>

        <p><strong>Certificate:</strong>
            {order.certificate_info && order.certificate_info.signedUrl ? (
                <a href={order.certificate_info.signedUrl} target="_blank" rel="noopener noreferrer">
                    {order.certificate_info.filename || 'Certificate File'}
                </a>
            ) : order.certificate_info && order.certificate_info.filename ? (
                <span>{order.certificate_info.filename} (Link Error)</span>
            ) : (
                'N/A'
            )}
        </p>

        <p><strong>Uploaded Original Files:</strong></p>
        {order.uploaded_files_info && Array.isArray(order.uploaded_files_info) && order.uploaded_files_info.length > 0 ? (
            <ul>
            {order.uploaded_files_info.map((fileInfo: any, index: number) => (
                <li>
                    {fileInfo.signedUrl ? (
                        <a href={fileInfo.signedUrl} target="_blank" rel="noopener noreferrer">
                            {fileInfo.filename || `File ${index + 1}`}
                        </a>
                    ) : (
                        <span>{fileInfo.filename || `File ${index + 1}`} (Link Error)</span>
                    )}
                </li>
            ))}
            </ul>
        ) : (
          <p>No original files uploaded.</p>
        )}

        <p><strong>Current Translated File:</strong>
            <span id="translated-file-link-container">
                 {order.translated_file_info && order.translated_file_info.signedUrl ? (
                    <a href={order.translated_file_info.signedUrl} target="_blank" rel="noopener noreferrer" data-translated-link>
                        {order.translated_file_info.filename || 'Translated File'}
                    </a>
                 ) : order.translated_file_info && order.translated_file_info.filename ? (
                    <span data-translated-link>{order.translated_file_info.filename} (Link Error)</span>
                 ) : (
                    <span data-translated-link>None</span>
                 )}
            </span>
        </p>
      </section>

      {}
      <section class="order-update">
        <h2>Update Order</h2>
        <form data-update-form data-order-id={orderIdNum}>
          {}
           <div class="form-group">
            <label for="status">Status:</label>
            <select id="status" name="status">
              {}
              <option value="pending" selected={order.status === 'pending'}>Pending</option>
              <option value="processing" selected={order.status === 'processing'}>Processing</option>
              <option value="completed" selected={order.status === 'completed'}>Completed</option>
              <option value="cancelled" selected={order.status === 'cancelled'}>Cancelled</option>
              {}
              <option value="" selected={!order.status || order.status === null}>N/A</option> {}
            </select>
          </div>
          <div class="form-group">
            <label for="page_count">Page Count:</label>
            <input type="number" id="page_count" name="page_count" value={order.page_count ?? ''} min="0" step="1" />
          </div>
          <div class="form-group">
            <label for="total_price">Total Price (smallest unit):</label>
            <input type="number" id="total_price" name="total_price" value={order.total_price ?? ''} min="0" />
          </div>
          <button type="submit">Update Order</button>
          <div data-update-status class="status-message"></div>
        </form>
      </section>

       {}
       <section class="order-upload">
        <h2>Upload Translated File</h2>
        <form data-upload-form data-order-id={orderIdNum}>
            <div class="form-group">
                <label for="translated_file">Select File:</label>
                <input type="file" id="translated_file" name="translated_file" required />
            </div>
            <button type="submit">Upload Translation</button>
            <div data-upload-status class="status-message"></div>
        </form>
       </section>
    </div>
  )}
</AdminLayout>

<script>

    import type { Order } from "../../../types/types";

    type SignedFileInfo = {
        path: string;
        filename: string | null;
        signedUrl: string | null;
    } | null; 

    type UpdatePayload = {
        status?: Order['status'] | null; 
        page_count?: number | null;
        total_price?: number | null;
    };

    type ApiOrderResponse = Partial<Order> & {
        uploaded_files_info?: SignedFileInfo[];
        certificate_info?: SignedFileInfo;
        translated_file_info?: SignedFileInfo; 
    };

    function setStatusMessage(element: HTMLElement | null, message: string, isError = false) { 
        if (!element) return;
        element.textContent = message;
        element.className = `status-message ${isError ? 'status-error' : 'status-success'}`;
        element.style.display = message ? 'block' : 'none';
    }

    function updateTranslatedFileDisplay(fileInfo: SignedFileInfo | undefined) { 
        const container = document.getElementById('translated-file-link-container');
        if (!container) return;

        if (fileInfo && fileInfo.signedUrl && fileInfo.filename) {
            container.innerHTML = `<a href="${fileInfo.signedUrl}" target="_blank" rel="noopener noreferrer" data-translated-link>${fileInfo.filename}</a>`;
        } else if (fileInfo && fileInfo.filename) {

            container.innerHTML = `<span data-translated-link>${fileInfo.filename} (Link Error)</span>`;
        } else {

            container.innerHTML = `<span data-translated-link>None</span>`;
        }
    }

    const updateForm = document.querySelector('[data-update-form]');
    const updateStatusEl = document.querySelector('[data-update-status]');

    if (updateForm && updateStatusEl) {
        updateForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const statusDiv = updateStatusEl as HTMLElement; 
            setStatusMessage(statusDiv, 'Updating...', false);
            const orderId = (updateForm as HTMLElement).dataset.orderId;
            if (!orderId) {
                setStatusMessage(statusDiv, 'Error: Missing order ID.', true);
                return;
            }

            const formData = new FormData(updateForm as HTMLFormElement);
            const payload: UpdatePayload = {}; 

            const status = formData.get('status');
            const pageCountRaw = formData.get('page_count');
            const totalPriceRaw = formData.get('total_price');

            if (status !== null && status !== undefined) {
                 if (status === "") {
                    payload.status = null;
                 } else if (["pending", "processing", "completed", "cancelled"].includes(status as string)) {
                    payload.status = status as Order['status'];
                 } else {
                     setStatusMessage(statusDiv, 'Invalid status value selected.', true);
                     return; 
                 }
            }

            if (pageCountRaw !== null && pageCountRaw !== '') {
                const pageCountNum = parseInt(pageCountRaw as string, 10);
                if (!isNaN(pageCountNum)) payload.page_count = pageCountNum;
                else {
                    setStatusMessage(statusDiv, 'Invalid page count.', true);
                    return;
                }
            } else if (pageCountRaw === '') {
                 payload.page_count = null;
            }

            if (totalPriceRaw !== null && totalPriceRaw !== '') {
                 const totalPriceNum = parseInt(totalPriceRaw as string, 10);
                 if (!isNaN(totalPriceNum)) payload.total_price = totalPriceNum;
                 else {
                     setStatusMessage(statusDiv, 'Invalid total price.', true);
                     return;
                 }
            } else if (totalPriceRaw === '') {
                payload.total_price = null;
            }

            if (Object.keys(payload).length === 0) {
                 setStatusMessage(statusDiv, 'No changes detected to update.', false);
                 return;
            }

            console.log('Sending update payload:', payload);
            try {
                const response = await fetch(`/api/admin/orders/${orderId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json', },
                    body: JSON.stringify(payload),
                });

                const result: ApiOrderResponse = await response.json();
                if (!response.ok) throw new Error((result as any).error || `HTTP error ${response.status}`);

                setStatusMessage(statusDiv, 'Order updated successfully!', false);

                if (result.status !== undefined) (document.getElementById('status') as HTMLSelectElement).value = result.status ?? ''; 
                if (result.page_count !== undefined) (document.getElementById('page_count') as HTMLInputElement).value = result.page_count?.toString() ?? '';
                if (result.total_price !== undefined) (document.getElementById('total_price') as HTMLInputElement).value = result.total_price?.toString() ?? '';

                updateTranslatedFileDisplay(result.translated_file_info); 

            } catch (error) { 
                console.error('Update Error:', error);
                const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred during update.';
                setStatusMessage(statusDiv, `Update failed: ${errorMessage}`, true);
            }
        });
    } else {
        console.warn('Update form elements not found.');
    }

     const uploadForm = document.querySelector('[data-upload-form]');
     const uploadStatusEl = document.querySelector('[data-upload-status]');
     const fileInput = document.getElementById('translated_file') as HTMLInputElement | null;

     if (uploadForm && uploadStatusEl && fileInput) {
        uploadForm.addEventListener('submit', async (event) => {
            event.preventDefault();
            const statusDiv = uploadStatusEl as HTMLElement; 
            setStatusMessage(statusDiv, 'Uploading...', false);
            const orderId = (uploadForm as HTMLElement).dataset.orderId;
             if (!orderId) {
                 setStatusMessage(statusDiv, 'Error: Missing order ID.', true);
                 return;
             }
             if (!fileInput.files || fileInput.files.length === 0 || fileInput.files[0].size === 0) {
                  setStatusMessage(statusDiv, 'Please select a file to upload.', true);
                  return;
             }

            const file = fileInput.files[0];
            const formData = new FormData();
            formData.append('translated_file', file);

            try {
                 const response = await fetch(`/api/admin/orders/${orderId}/upload`, {
                    method: 'POST',
                    body: formData,
                 });

                 const result: ApiOrderResponse = await response.json();
                 if (!response.ok) throw new Error((result as any).error || `HTTP error ${response.status}`);

                 setStatusMessage(statusDiv, 'File uploaded and order updated successfully!', false);

                 updateTranslatedFileDisplay(result.translated_file_info); 

                 (uploadForm as HTMLFormElement).reset(); 

             } catch (error) { 
                 console.error('Upload Error:', error);
                 const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred during upload.';
                 setStatusMessage(statusDiv, `Upload failed: ${errorMessage}`, true);
             }
        });
     } else {
         console.warn('Upload form elements not found.');
     }

</script>

{}
<style>

  .order-details-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 1rem;
  }

  .order-info, .order-update, .order-upload {
      background-color: #f9f9f9;
      padding: 1.5rem;
      border-radius: 5px;
      border: 1px solid #eee;
  }
  h2 {
      margin-top: 0;
      border-bottom: 1px solid #ddd;
      padding-bottom: 0.5rem;
      margin-bottom: 1rem;
  }
  p {
      margin-bottom: 0.75rem;
      line-height: 1.5;
  }
  strong {
      display: inline-block;
      min-width: 120px; 
  }
  .form-group {
      margin-bottom: 1rem;
  }
  label {
    display: block;
    margin-bottom: 0.3rem;
    font-weight: bold;
  }
  input[type="text"],
  input[type="number"],
  input[type="file"],
  select,
  button {
      width: 100%;
      padding: 0.6rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      margin-top: 0.2rem;
  }
  input[type="file"] {
      width: auto; 
      padding: 0.4rem; 
  }
   button {
      background-color: #007bff;
      color: white;
      border: none;
      cursor: pointer;
      transition: background-color 0.2s ease;
      font-weight: bold;
      padding: 0.75rem 1rem; 
   }
   button:hover {
      background-color: #0056b3;
   }
   button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
   }

   .status-message {
    margin-top: 1rem;
    padding: 0.75rem;
    border-radius: 4px;
    display: none; 
    font-weight: bold;
    text-align: center;
  }

  .status-message.status-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .status-message.status-error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
   .error-message { 
      color: #721c24;
      background-color: #f8d7da;
      border: 1px solid #f5c6cb;
      padding: 1rem;
      border-radius: 4px;
      margin-bottom: 1rem;
  }
  ul {
    list-style: disc;
    margin-left: 1.5rem;
    padding-left: 0; 
  }
   li {
     margin-bottom: 0.5rem; 
   }
   a {
     color: #0056b3;
     text-decoration: none;
   }
   a:hover {
     text-decoration: underline;
   }
   span[data-translated-link],
   span + a[data-translated-link] { 
        display: inline-block;
   }
</style>