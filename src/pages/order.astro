---
// src/pages/order.astro
import Layout from "../layout/Layout.astro";

const title = "Place Your Order";
---

<Layout title={title}>
  <main>
    <section>
      <h1>{title}</h1>
      <p>Enter your name to start your order.</p>

      <form id="order-form">
        <div>
          <label for="orderer-name">Your Name:</label>
          <input
            type="text"
            id="orderer-name"
            name="orderer_name"
            required
            placeholder="Enter your name"
          />
        </div>

        <div id="order-status" aria-live="polite" style="margin-top: 1rem; min-height: 1.5em;">
          {/* Status messages will appear here */}
        </div>

        <button type="submit" id="submit-order-button" style="margin-top: 1rem;">
          Submit Order
        </button>
      </form>

    </section>
  </main>
</Layout>

<script>
    import { supabase } from '../lib/supabase'; // Keep this for potential getSession check if desired
  
    const form = document.getElementById('order-form') as HTMLFormElement | null;
    const nameInput = document.getElementById('orderer-name') as HTMLInputElement | null;
    const submitButton = document.getElementById('submit-order-button') as HTMLButtonElement | null;
    const statusDiv = document.getElementById('order-status');
  
    // Helper function to check if session cookies likely exist client-side
    // Note: This is an approximation as JS can't read HttpOnly cookies directly
    function hasSessionCookies(): boolean {
      // A simple check: Supabase often sets non-HttpOnly helper cookies or items
      // Alternatively, rely entirely on the server endpoint to check
      // return document.cookie.includes('sb-'); // Simple check
      return false; // Let's rely on the server endpoint to check cookies for simplicity
    }
  
  
    if (form && nameInput && submitButton && statusDiv) {
      form.addEventListener('submit', async (event) => {
        event.preventDefault();
  
        const ordererName = nameInput.value.trim();
  
        if (!ordererName) {
          statusDiv.textContent = 'Please enter your name.';
          statusDiv.style.color = 'red';
          nameInput.focus();
          return;
        }
  
        submitButton.disabled = true;
        submitButton.textContent = 'Processing...';
        statusDiv.textContent = 'Processing your request...';
        statusDiv.style.color = 'inherit';
  
        try {
          // 1. Ensure Authentication via Server Endpoint
          statusDiv.textContent = 'Ensuring session...';
  
          // Call our NEW server endpoint to handle anonymous sign-in and set cookies
          const authResponse = await fetch('/api/auth/anonymous', { method: 'POST' });
  
          if (!authResponse.ok) {
             const errorData = await authResponse.json().catch(() => ({})); // Try parsing error
             console.error("Anonymous auth endpoint error:", authResponse.status, errorData);
             throw new Error(errorData.error || `Authentication setup failed: Status ${authResponse.status}`);
          }
  
          console.log("Session ensured via server endpoint.");
          // Now the HttpOnly cookies should be set by the server
  
          // 2. Submit the order data (cookies will be sent automatically)
          statusDiv.textContent = 'Submitting order...';
  
          const orderResponse = await fetch('/api/orders/create', { // Corrected variable name
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
            },
            body: JSON.stringify({ orderer_name: ordererName }),
          });
  
          if (!orderResponse.ok) {
            let errorMsg = `HTTP error! Status: ${orderResponse.status}`;
            try {
              const errorData = await orderResponse.json();
              errorMsg = errorData.error || errorMsg;
            } catch (parseError) {}
            console.error("Order submission failed:", errorMsg);
            // Check specifically for 401 again, though it shouldn't happen now if auth endpoint worked
            if (orderResponse.status === 401) {
              errorMsg = "Authorization failed. Please try refreshing the page.";
            }
            throw new Error(`Order submission failed: ${errorMsg}`);
          }
  
          const createdOrder = await orderResponse.json();
          console.log("Order created:", createdOrder);
          statusDiv.textContent = `Order submitted successfully! Order ID: ${createdOrder.id}`;
          statusDiv.style.color = 'green';
          form.reset();
  
        } catch (error: any) {
          console.error('Order process error:', error);
          statusDiv.textContent = `Error: ${error.message || 'An unexpected error occurred.'}`;
          statusDiv.style.color = 'red';
  
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = 'Submit Order';
        }
      });
    } else {
      console.error('Could not find all required elements for the order form script.');
    }
  </script>