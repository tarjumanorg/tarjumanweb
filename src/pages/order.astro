---
// src/pages/order.astro
import Layout from "../layout/Layout.astro";

const title = "Place Your Order";
const turnstileSiteKey = "0x4AAAAAABDz77Fkj-zw6ls4";
---

<Layout title={title}>
  <head>
    <script src="https://challenges.cloudflare.com/turnstile/v0/api.js" defer
    ></script>
  </head>
  <main>
    <section>
      <h1>{title}</h1>
      <p>Enter your details to start your order.</p>

      <form id="order-form" action="/api/orders/create" method="post">
        <div>
          <label for="orderer-name">Your Name:</label>
          <input
            type="text"
            id="orderer-name"
            name="orderer_name"
            required
            placeholder="Enter your name"
          />
        </div>

        <div style="margin-top: 1rem;">
          <label for="phone">Phone Number:</label>
          <input
            required
            type="tel"
            id="phone"
            name="phone"
            placeholder="+62XXXXXXX"
          />
        </div>

        <!-- Turnstile Widget -->
        <div
          class="cf-turnstile"
          data-sitekey={turnstileSiteKey}
          style="margin-top: 1rem;"
        >
        </div>
        <!-- End Turnstile Widget -->

        <div
          id="order-status"
          aria-live="polite"
          style="margin-top: 1rem; min-height: 1.5em; font-weight: bold;"
        >
        </div>

        <button
          type="submit"
          id="submit-order-button"
          style="margin-top: 1rem;"
          data-original-text="Submit Order"
        >
          Submit Order
        </button>
      </form>
    </section>
  </main>
</Layout>

<script>
  import { submitFormData, resetTurnstileWidget } from "../scripts/formHandler";
  import type { FormSubmitOptions } from "../types/types";

  const form = document.getElementById("order-form") as HTMLFormElement | null;
  const nameInput = document.getElementById(
    "orderer-name",
  ) as HTMLInputElement | null;
  const phoneInput = document.getElementById(
    "phone",
  ) as HTMLInputElement | null;
  const submitButton = document.getElementById(
    "submit-order-button",
  ) as HTMLButtonElement | null;
  const statusDiv = document.getElementById(
    "order-status",
  ) as HTMLElement | null;
  const turnstileResponseInputName = "cf-turnstile-response";

  if (form && nameInput && phoneInput && submitButton && statusDiv) {
    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      if (statusDiv) statusDiv.textContent = "Ensuring session...";
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = "Initializing...";
      }

      try {
        const authResponse = await fetch("/api/auth/anonymous", {
          method: "POST",
        });
        if (!authResponse.ok) {
          let errorMsg = "Authentication setup failed.";
          try {
            const errorData = await authResponse.json();
            errorMsg =
              errorData.error ||
              `Authentication setup failed: Status ${authResponse.status}`;
          } catch (e) {
            /* Ignore */
          }
          throw new Error(errorMsg);
        }
        console.log("Session ensured via server endpoint.");

        const preparePayloadForOrder = (): Record<string, any> | null => {
          const ordererName = nameInput.value.trim();
          const phone = phoneInput.value.trim();
          const formData = new FormData(form);
          const turnstileToken = formData
            .get(turnstileResponseInputName)
            ?.toString();

          if (!ordererName) {
            if (statusDiv) {
              statusDiv.textContent = "Please enter your name.";
              statusDiv.style.color = "red";
            }
            nameInput.focus();
            return null;
          }

          if (!phone) {
            if (statusDiv) {
              statusDiv.textContent = "Please enter your phone number.";
              statusDiv.style.color = "red";
            }
            phoneInput.focus();
            return null;
          }

          if (!turnstileToken) {
            if (statusDiv) {
              statusDiv.textContent =
                "CAPTCHA challenge failed, missing, or expired. Please try again.";
              statusDiv.style.color = "red";
            }
            resetTurnstileWidget(form);
            return null;
          }

          const payload: Record<string, any> = {
            orderer_name: ordererName,
            turnstileToken: turnstileToken,
            phone: phone,
          };

          return payload;
        };

        const onOrderSuccess = (data: any, formElement: HTMLFormElement) => {
          if (statusDiv) {
            statusDiv.textContent = `Order submitted successfully! Order ID: ${data.id}`;
            statusDiv.style.color = "green";
          }
          formElement.reset();
          resetTurnstileWidget(formElement);
          setTimeout(() => {
            if (statusDiv) statusDiv.textContent = "";
          }, 5000);
        };

        const onOrderError = (
          error: Error,
          statusElement: HTMLElement | null,
        ) => {
          if (statusElement) {
            if (error.message.includes("CAPTCHA verification failed")) {
              statusElement.textContent = `Error: CAPTCHA verification failed. Please try again. (${error.message})`;
            } else if (
              error.message.includes("missing") ||
              error.message.includes("expired")
            ) {
              statusElement.textContent = `Error: CAPTCHA challenge failed or expired. Please wait and try again. (${error.message})`;
            } else {
              statusElement.textContent = `Error: ${error.message || "An unexpected error occurred."}`;
            }
            statusElement.style.color = "red";
          }
          resetTurnstileWidget(form);
        };

        const options: FormSubmitOptions = {
          formElement: form,
          statusElement: statusDiv,
          submitButton: submitButton,
          preparePayload: preparePayloadForOrder,
          onSuccess: onOrderSuccess,
          onError: onOrderError,
          submittingText: "Submitting Order...",
          submitText: "Submit Order",
        };

        await submitFormData(options);
      } catch (authError: any) {
        console.error("Anonymous auth error:", authError);
        if (statusDiv) {
          statusDiv.textContent = `Error: ${authError.message || "Failed to prepare session."}`;
          statusDiv.style.color = "red";
        }
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent =
            submitButton.dataset.originalText || "Submit Order";
        }
        resetTurnstileWidget(form);
      }
    });
  } else {
    console.error(
      "Could not find all required elements (form, name, phone, submit, status) for the order form script.",
    );
  }
</script>
