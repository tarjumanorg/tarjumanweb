---

`src\pages\dashboard.astro`:
```
---
// src/pages/dashboard.astro
import Layout from "../layout/Layout.astro";
import { supabase } from "../lib/supabase";
import Reviews from "../components/Reviews.astro";
import type { GuestbookEntry } from "../types/types";

const { email } = Astro.locals;

let reviews: GuestbookEntry[] = [];
let fetchError: string | null = null;

try {
  const { data, error } = await supabase
    .from("guestbook")
    .select("name, message")
    .order("created_at", { ascending: false });

  if (error) {
    throw error;
  }
  reviews = data as GuestbookEntry[];

} catch (e: any) {
   fetchError = `Failed to load reviews: ${e.message}`;
   console.error("Error fetching reviews:", e);
}
---

<Layout title="Dashboard">
  <section>
    <p>
      Logged in as: <strong>{email}</strong>
    </p>
    <p>
      This is a protected page. You can only see this if you are logged in.
    </p>
    <a
      href="/api/auth/signout"
      >Sign out</a
    >

    {fetchError && <p>{fetchError}</p>}

    <Reviews reviews={reviews} />
  </section>
</Layout>
```

---

`src\env.d.ts`:
```
declare namespace App {
  interface Locals {
    email: string;
  }
}
interface ImportMetaEnv {
  readonly SUPABASE_URL: string
  readonly SUPABASE_ANON_KEY: string
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}
```

---

`src\pages\api\guestbook.ts`:
```
import type { APIRoute } from "astro";
import { supabase } from "../../lib/supabase";

export const GET: APIRoute = async () => {
  const { data, error } = await supabase
    .from("guestbook")
    .select("*")
    .order("created_at", { ascending: true });

  if (error) {
    return new Response(
      JSON.stringify({
        error: error.message,
      }),
      { status: 500 },
    );
  }
  
  return new Response(JSON.stringify(data));
};

export const POST: APIRoute = async ({ request }) => {
  const { name, message } = await request.json();
  const { data, error } = await supabase
    .from("guestbook")
    .insert({ name, message })
    .select();

  if (error) {
    return new Response(
      JSON.stringify({
        error: error.message,
      }),
      { status: 500 },
    );
  }

  return new Response(JSON.stringify(data));
};

```

---

`src\pages\api\auth\signin.ts`:
```
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";
import type { Provider } from "@supabase/supabase-js";

export const POST: APIRoute = async ({ request, cookies, redirect }) => {
  const formData = await request.formData();
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();
  const provider = formData.get("provider")?.toString();

  if (provider) {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: provider as Provider,
      options: {
        redirectTo: import.meta.env.DEV
          ? "http://localhost:4321/api/auth/callback"
          : "https://tarjuman.netlify.app/api/auth/callback",
      },
    });

    if (error) {
      return new Response(error.message, { status: 500 });
    }

    return redirect(data.url);
  }

  if (!email || !password) {
    return new Response("Email and password are required", { status: 400 });
  }

  const { data, error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    return new Response(error.message, { status: 500 });
  }

  const { access_token, refresh_token } = data.session;
  cookies.set("sb-access-token", access_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
  });
  cookies.set("sb-refresh-token", refresh_token, {
    sameSite: "strict",
    path: "/",
    secure: true,
  });

  return redirect("/dashboard");
};
```

---

`src\lib\supabase.ts`:
```
import { createClient } from "@supabase/supabase-js";

export const supabase = createClient(
  import.meta.env.SUPABASE_URL,
  import.meta.env.SUPABASE_ANON_KEY,
  {
    auth: {
      flowType: "pkce",
      autoRefreshToken: true,
      detectSessionInUrl: false,
      persistSession: true,
    },
  },
);

```

---

`src\types\types.ts`:
```
// src/types/types.ts
export interface GuestbookEntry {
    name: string;
    message: string;
  }
```

---

`src\middleware\index.ts`:
```
// src/middleware/index.ts
import { defineMiddleware } from "astro:middleware";
import { supabase } from "../lib/supabase";
// No need to import micromatch anymore

// Define routes clearly
// For simple paths, direct string comparison after normalization is often easiest
const protectedPaths = ["/dashboard"];
const redirectPaths = ["/signin", "/register"];
const protectedAPIPaths = ["/api/guestbook"];

// Helper function to check paths, handling optional trailing slash
function matchesPath(pathname: string, pathsToCheck: string[]): boolean {
  // Normalize pathname by removing trailing slash (if present)
  const normalizedPathname = pathname.endsWith('/') && pathname.length > 1
    ? pathname.slice(0, -1)
    : pathname;
  return pathsToCheck.includes(normalizedPathname);
}

// --- OR using URLPattern (slightly more overhead for this simple case, but good for complex patterns) ---
/*
const protectedPatterns = [
  new URLPattern({ pathname: '/dashboard' }),
  new URLPattern({ pathname: '/dashboard/' }) // Handle trailing slash explicitly
];
const redirectPatterns = [
  new URLPattern({ pathname: '/signin' }),
  new URLPattern({ pathname: '/signin/' }),
  new URLPattern({ pathname: '/register' }),
  new URLPattern({ pathname: '/register/' })
];
const protectedAPIPatterns = [
    new URLPattern({ pathname: '/api/guestbook' }),
    new URLPattern({ pathname: '/api/guestbook/' })
];

function matchesPattern(url: URL, patterns: URLPattern[]): boolean {
    return patterns.some(pattern => pattern.test(url));
}
*/
// --- End of URLPattern example ---


export const onRequest = defineMiddleware(
  async ({ locals, url, cookies, redirect }, next) => {

    // Choose one method: matchesPath (simpler) or matchesPattern (URLPattern)
    const isProtectedRoute = matchesPath(url.pathname, protectedPaths);
    // const isProtectedRoute = matchesPattern(url, protectedPatterns); // URLPattern alternative

    if (isProtectedRoute) {
      const accessToken = cookies.get("sb-access-token");
      const refreshToken = cookies.get("sb-refresh-token");

      if (!accessToken || !refreshToken) {
        return redirect("/signin");
      }

      // ... rest of your token validation logic ...
      const { data, error } = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
      });

      if (error) {
        // Clear potentially invalid cookies
        cookies.delete("sb-access-token", { path: "/" });
        cookies.delete("sb-refresh-token", { path: "/" });
        return redirect("/signin");
      }

      locals.email = data.user?.email!;
      cookies.set("sb-access-token", data?.session?.access_token!, {
        sameSite: "strict",
        path: "/",
        secure: true, // Keep secure: true for production
        // httpOnly: true // Consider adding httpOnly for access token if not needed client-side
      });
      cookies.set("sb-refresh-token", data?.session?.refresh_token!, {
        sameSite: "strict",
        path: "/",
        secure: true, // Keep secure: true for production
        httpOnly: true, // Refresh token should usually be httpOnly
      });
    }

    const isRedirectRoute = matchesPath(url.pathname, redirectPaths);
    // const isRedirectRoute = matchesPattern(url, redirectPatterns); // URLPattern alternative

    if (isRedirectRoute) {
      const accessToken = cookies.get("sb-access-token");
      const refreshToken = cookies.get("sb-refresh-token");

      if (accessToken && refreshToken) {
        // Maybe quickly verify tokens here before redirecting? Optional.
        return redirect("/dashboard");
      }
    }

    const isProtectedAPIRoute = matchesPath(url.pathname, protectedAPIPaths);
    // const isProtectedAPIRoute = matchesPattern(url, protectedAPIPatterns); // URLPattern alternative

    if (isProtectedAPIRoute) {
      const accessToken = cookies.get("sb-access-token");
      const refreshToken = cookies.get("sb-refresh-token");

      if (!accessToken || !refreshToken) {
        return new Response(JSON.stringify({ error: "Unauthorized" }), { status: 401 });
      }

      const { error } = await supabase.auth.getUser(accessToken.value); // Use getUser for a quick check

      if (error) {
         // Attempt to refresh if getUser fails (could be expired token)
         if (refreshToken) {
            const { error: refreshError } = await supabase.auth.setSession({
                 refresh_token: refreshToken.value,
                 access_token: accessToken.value, // Provide both for potential session update
            });
             if (refreshError) {
                 // Clear invalid cookies if refresh fails
                 cookies.delete("sb-access-token", { path: "/" });
                 cookies.delete("sb-refresh-token", { path: "/" });
                 return new Response(JSON.stringify({ error: "Unauthorized - Session Refresh Failed" }), { status: 401 });
             }
             // If refresh succeeded, the tokens might have been updated by setSession.
             // Proceed carefully, maybe re-check or let the request handler proceed.
             // For simplicity here, we'll just proceed assuming setSession handles validity.
         } else {
            // No refresh token available
            return new Response(JSON.stringify({ error: "Unauthorized - Invalid Token" }), { status: 401 });
         }
      }
      // If getUser succeeded or refresh succeeded, proceed
    }

    // If none of the conditions matched or validation passed, continue to the next middleware or page
    return next();
  },
);
```

---

`src\pages\index.astro`:
```
---
import Layout from "../layout/Layout.astro";
import Supabase from "../icons/Supabase.astro";
import AstroIcon from "../icons/AstroIcon.astro";
export const prerender = true;
const title = "Supabase and Astro Demo";
---

<Layout title={title}>
  <main>
    <h1>{title}</h1>
    <ul>
      <li
      >
        <AstroIcon />
      </li>
       &plus;
      <li
      >
        <Supabase />
      </li>
    </ul>
    <p>This page was pre-rendered at build time</p>
  </main>
</Layout>

```

---

`src\layout\Layout.astro`:
```
---
interface Props {
  title: string;
}

const description = "Astro and Supabase demo app";
const { title } = Astro.props;
const ogImageURL = new URL("hero.png", Astro.site).href;
const canonicalURL = new URL(Astro.url).href;
---

<html lang="en" class="h-full w-full">
  <head>
    <title>{title}</title>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta property="twitter:image" content={ogImageURL} />
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="og:image" content={ogImageURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
  </head>
  <body
    class="flex flex-col h-full w-full dark:bg-zinc-900 bg-zinc-50 dark:text-zinc-100"
  >
    <nav class="border-b bg-white dark:bg-zinc-800 dark:border-zinc-700">
      <div
        class="flex items-baseline justify-end sm:justify-between p-4 max-w-screen-xl mx-auto"
      >
        <a href="/" class="hidden sm:block font-semibold dark:text-white"
          >Astro</a
        >
        <div>
          <ul class="font-medium flex items-baseline gap-8">
            <li>
              <a
                href="/dashboard"
                class="block text-zinc-900 dark:text-gray-200">Dashboard</a
              >
            </li>
            <li>
              <a href="/register" class="block text-zinc-900 dark:text-gray-200"
                >Register</a
              >
            </li>
            <li>
              <a href="/signin" class="block text-zinc-900 dark:text-gray-200"
                >Sign in</a
              >
            </li>
          </ul>
        </div>
      </div>
    </nav>
    <slot />
  </body>
</html>

```

---

`src\components\Reviews.astro`:
```
---
import type { GuestbookEntry } from "../types/types"; // Adjust path if needed

// Define the props the component expects
interface Props {
  reviews: GuestbookEntry[];
}

// Get the reviews from the props passed by the parent page
const { reviews } = Astro.props;

// No need to fetch data or handle fetch errors here anymore
---

<div>
  {/* Form remains the same, using standard HTML submission */}
  <form
    action="/api/guestbook"
    method="post"
    class="mb-8 p-4 border rounded dark:border-zinc-700 bg-zinc-100 dark:bg-zinc-800"
  >
    <h3 class="text-lg font-semibold mb-3 dark:text-white">Leave a message</h3>
    <div class="mb-3">
      <label
        for="name"
        class="block mb-1 text-sm font-medium text-zinc-700 dark:text-zinc-300"
      >
        Name
      </label>
      <input
        id="name"
        type="text"
        placeholder="Your Name"
        required
        name="name"
        class="w-full p-2 border rounded dark:bg-zinc-700 dark:border-zinc-600 dark:text-zinc-100 focus:ring-blue-500 focus:border-blue-500"
      />
    </div>
    <div class="mb-4">
      <label
        for="message"
        class="block mb-1 text-sm font-medium text-zinc-700 dark:text-zinc-300"
      >
        Message
      </label>
      <input
        id="message"
        type="text"
        placeholder="A friendly message..."
        required
        name="message"
        class="w-full p-2 border rounded dark:bg-zinc-700 dark:border-zinc-600 dark:text-zinc-100 focus:ring-blue-500 focus:border-blue-500"
      />
    </div>
    <button
      type="submit"
      class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors duration-200"
    >
      Submit
    </button>
  </form>

  {/* Display the reviews passed via props */}
  <h3 class="text-lg font-semibold mb-3 dark:text-white">Guestbook Entries</h3>
  {reviews.length > 0 ? (
     <ul class="space-y-4">
      {reviews.map((review) => (
        <li class="p-4 border rounded dark:border-zinc-700 bg-white dark:bg-zinc-800 shadow-sm">
          <p class="font-semibold text-zinc-800 dark:text-zinc-200">
            {review.name}
          </p>
          <p class="text-zinc-600 dark:text-zinc-400 mt-1">{review.message}</p>
        </li>
      ))}
    </ul>
  ) : (
    <p class="text-zinc-500 dark:text-zinc-400">No reviews yet. Be the first!</p>
  )}

</div>
```

---

`src\pages\signin.astro`:
```
---
import Layout from "../layout/Layout.astro";
const title = "Sign in";
---

<Layout title={title}>
  <main >
    <section >
      <h1
          >
        {title}
      </h1>
      <p >
        New to demo? <a
          href="/register"
            >Create an account</a
        >
      </p>
      <form
        action="/api/auth/signin"
        method="post"
          >
        <div class="grid grid-cols-1 gap-2">
          <label
            for="email"
             >Email</label
          >
          <input
            id="email"
            type="email"
            name="email"
             />
        </div>
        <label
          for="password"
            >Password</label
        >
        <input
          id="password"
          type="password"
          name="password"
          />
        <button
          type="submit"
            >Sign In</button
        >
      </form>
      <hr  />
      <p >
        <span >Or with</span>
      </p>
      <form
        action="/api/auth/signin"
        method="post"

      >
        <button
          value="github"
          name="provider"
          type="submit"
           >
           Sign in with GitHub</button
        >
        <button
          value="google"
          name="provider"
              type="submit"
        >
           Sign in with Google
        </button>
      </form>
    </section>
  </main>
</Layout>

```

---