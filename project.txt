---

`astro.config.mjs`:
```
import { defineConfig } from 'astro/config';
import netlify from '@astrojs/netlify';

export default defineConfig({
  site: 'https://tarjuman.netlify.app',
  output: 'server',
  adapter: netlify(),

});
```
---

`tsconfig.json`:
```
{
  "extends": "astro/tsconfigs/strict",
  "include": [".astro/types.d.ts", "**/*"],
  "exclude": ["dist"]
}

```
---

`src/env.d.ts`:
```
// src/env.d.ts
declare namespace App {
  interface Locals {
    // Changed from email: string to userId?: string
    // Optional because not all requests will have an authenticated user
    userId?: string;
  }
}
```
---

`src/components/Reviews.astro`:
```
---
// src/components/Reviews.astro
import type { GuestbookEntry } from "../types/types";
interface Props {
  reviews: GuestbookEntry[];
}
const { reviews } = Astro.props;
---

<div>
  <form id="guestbook-form" method="post" action="/api/guestbook">
    <h3>Leave a message</h3>
    {/* Added min-height and margin for better layout */}
    <div
      id="form-status"
      aria-live="polite"
      style="min-height: 1.5em; margin-bottom: 1em; font-weight: bold;"
    >
    </div>

    <div>
      <label for="name">Name</label>
      <input
        id="name"
        type="text"
        placeholder="Your Name"
        required
        name="name"
      />
    </div>
    <div>
      <label for="message">Message</label>
      <input
        id="message"
        type="text"
        placeholder="A friendly message..."
        required
        name="message"
      />
    </div>
    {/* Added data-original-text attribute for handler */}
    <button id="submit-button" type="submit" data-original-text="Submit">
      Submit
    </button>
  </form>

  <h3>Guestbook Entries</h3>
  <div id="reviews-list">
    {
      reviews.length > 0 ? (
        <ul>
          {reviews.map((review) => (
            <li>
              <p>
                <strong>{review.name}</strong>
              </p>{" "}
              {/* Made name bold */}
              <p>{review.message}</p>
            </li>
          ))}
        </ul>
      ) : (
        <p>No reviews yet. Be the first!</p>
      )
    }
  </div>
</div>

<script>
  import { setupFormSubmitListener } from "../scripts/formHandler";
  import type { FormSubmitOptions } from "../types/types";

  const form = document.getElementById(
    "guestbook-form",
  ) as HTMLFormElement | null;
  const nameInput = document.getElementById("name") as HTMLInputElement | null;
  const messageInput = document.getElementById(
    "message",
  ) as HTMLInputElement | null;
  const statusDiv = document.getElementById(
    "form-status",
  ) as HTMLElement | null;
  const submitButton = document.getElementById(
    "submit-button",
  ) as HTMLButtonElement | null;

  if (form && nameInput && messageInput && statusDiv && submitButton) {
    const preparePayloadForReview = (): Record<string, any> | null => {
      const name = nameInput.value.trim();
      const message = messageInput.value.trim();

      if (!name || !message) {
        if (statusDiv) {
          statusDiv.textContent = "Please enter both name and message.";
          statusDiv.style.color = "red";
        }
        return null;
      }
      return { name, message };
    };

    const onReviewSuccess = (data: any, formElement: HTMLFormElement) => {
      if (statusDiv) {
        statusDiv.textContent = "Message submitted successfully!";
        statusDiv.style.color = "green";
      }
      formElement.reset();
      // IMPORTANT: This simple example doesn't dynamically update the list above.
      // A page refresh would be needed to see the new entry, or use
      // more advanced techniques (HTMX, Alpine, framework component).
      console.log("Submitted data:", data);
      // Optional: Clear success message after a delay
      setTimeout(() => {
        if (statusDiv) statusDiv.textContent = "";
      }, 5000);
    };

    const onReviewError = (error: Error, statusElement: HTMLElement | null) => {
      if (statusElement) {
        statusElement.textContent = `Error: ${error.message || "Could not submit message."}`;
        statusElement.style.color = "red";
      }
      // Optional: Clear error message after a delay
      // setTimeout(() => { if(statusDiv) statusDiv.textContent = ''; }, 8000);
    };

    // Define options for the handler
    const options: FormSubmitOptions = {
      formElement: form,
      statusElement: statusDiv,
      submitButton: submitButton,
      preparePayload: preparePayloadForReview,
      onSuccess: onReviewSuccess,
      onError: onReviewError,
      // endpoint and method will be taken from the form's action and method attributes
      submitText: "Submit", // Explicitly set restore text if needed
    };

    // Use the setup function for simple forms
    setupFormSubmitListener(options);
  } else {
    console.error(
      "Could not find all required form elements for guestbook submission script.",
    );
  }
</script>

```
---

`src/layout/Layout.astro`:
```
---
interface Props {
  title: string;
}

const description = "Astro and Supabase demo app";
const { title } = Astro.props;
const ogImageURL = new URL("hero.png", Astro.site).href;
const canonicalURL = new URL(Astro.url).href;
---

<html lang="en">
  <head>
    <title>{title}</title>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta property="twitter:image" content={ogImageURL} />
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="og:image" content={ogImageURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
  </head>
  <body>
    <nav>
      <div>
        <a href="/">Astro</a>
        <div>
          <ul>
            <li>
              <a href="/dashboard">Dashboard</a>
            </li>
            <li>
              <a href="/signin">Sign in</a>
            </li>
          </ul>
        </div>
      </div>
    </nav>
    <slot />
  </body>
</html>
```
---

`src/lib/supabase.ts`:
```
// src/lib/supabase.ts
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error("Supabase URL or Anon Key is missing.");
}

export const supabase = createClient(
  supabaseUrl,
  supabaseAnonKey,
  {
    auth: {
      flowType: "pkce",
      autoRefreshToken: true,
      detectSessionInUrl: false,
      persistSession: true,
    },
  },
);
```
---

`src/middleware/index.ts`:
```
// src/middleware/index.ts
import { defineMiddleware } from "astro:middleware";
import { supabase } from "../lib/supabase";
import { setAuthCookies, deleteAuthCookies } from '../utils/auth';
import { ACCESS_TOKEN, REFRESH_TOKEN } from '../utils/constants';

// Consider moving these to constants.ts as well if used elsewhere
// Or import if they are defined there
const protectedPaths = ["/dashboard"];
const redirectPaths = ["/signin"]; // e.g., signin, register
const protectedAPIPaths = ["/api/guestbook", "/api/orders/create"];

function matchesPath(pathname: string, pathsToCheck: string[]): boolean {
  const normalizedPathname = pathname.endsWith('/') && pathname.length > 1
    ? pathname.slice(0, -1)
    : pathname;
  return pathsToCheck.includes(normalizedPathname);
}

export const onRequest = defineMiddleware(
  async ({ locals, url, cookies, redirect }, next) => {
    // --- 1. Centralized Auth Check ---
    const accessToken = cookies.get(ACCESS_TOKEN);
    const refreshToken = cookies.get(REFRESH_TOKEN);
    locals.userId = undefined; // Ensure locals.userId is reset per request

    if (accessToken) {
      console.log("Middleware: Access token found. Verifying...");
      const { data: { user }, error: getUserError } = await supabase.auth.getUser(accessToken.value);

      if (user) {
        console.log(`Middleware: User ${user.id} verified successfully via access token.`);
        locals.userId = user.id;
        // Optional: Refresh session proactively if needed, but getUser is usually sufficient
      } else {
        console.log("Middleware: Access token invalid or expired.", getUserError?.message);
        if (refreshToken) {
          console.log("Middleware: Refresh token found. Attempting session refresh...");
          // Use setSession as it handles refresh internally when access token is provided (even if expired)
          const { data: refreshData, error: refreshError } = await supabase.auth.setSession({
            access_token: accessToken.value,
            refresh_token: refreshToken.value,
          });

          if (refreshData?.session && refreshData?.user) {
            console.log(`Middleware: Session refreshed successfully for user ${refreshData.user.id}. Setting cookies.`);
            locals.userId = refreshData.user.id;
            setAuthCookies(cookies, refreshData.session); // Update cookies with new tokens/expiry
          } else {
            console.log("Middleware: Session refresh failed. Deleting auth cookies.", refreshError?.message);
            deleteAuthCookies(cookies);
            // locals.userId remains undefined
          }
        } else {
          console.log("Middleware: Invalid access token and no refresh token found. Deleting auth cookies.");
          deleteAuthCookies(cookies);
          // locals.userId remains undefined
        }
      }
    } else {
       console.log("Middleware: No access token found.");
       // If only refresh token exists, Supabase client handles refresh on next DB call attempt,
       // but we can't pre-validate user easily here without access token for getUser.
       // If access token is missing, treat as unauthenticated for initial checks.
       // If refresh token exists alone, delete it as it's likely stale without access token.
       if (refreshToken) {
           console.log("Middleware: Access token missing but refresh token exists. Deleting stale refresh token.");
           deleteAuthCookies(cookies); // deleteAuthCookies targets both
       }
    }

    // --- 2. Path-Based Logic (using locals.userId) ---
    const isProtectedRoute = matchesPath(url.pathname, protectedPaths);
    const isProtectedAPIRoute = matchesPath(url.pathname, protectedAPIPaths);
    const isRedirectRoute = matchesPath(url.pathname, redirectPaths);

    if (isProtectedRoute && !locals.userId) {
      console.log(`Middleware: Blocked access to protected route ${url.pathname}. Redirecting to signin.`);
      return redirect("/signin");
    }

    if (isProtectedAPIRoute && !locals.userId) {
       console.log(`Middleware: Blocked access to protected API route ${url.pathname}. Returning 401.`);
       return new Response(JSON.stringify({ error: "Unauthorized" }), { status: 401 });
    }

    if (isRedirectRoute && locals.userId) {
        console.log(`Middleware: User already logged in (User ID: ${locals.userId}). Redirecting from ${url.pathname} to dashboard.`);
        return redirect("/dashboard");
    }

    // --- 3. Proceed if no action taken ---
    console.log(`Middleware: Allowing request to ${url.pathname}. Authenticated User ID: ${locals.userId ?? 'None'}`);
    return next();
  },
);
```
---

`src/pages/dashboard.astro`:
```
---
// src/pages/dashboard.astro
import Layout from "../layout/Layout.astro";
import { getAllGuestbookEntries } from "../services/guestbook.service";
import Reviews from "../components/Reviews.astro";
import type { GuestbookEntry } from "../types/types";

const { userId } = Astro.locals as { userId: string };

let reviews: GuestbookEntry[] = [];
let fetchError: string | null = null;

try {
  reviews = await getAllGuestbookEntries();

} catch (e: any) {
   fetchError = `Failed to load reviews: ${e.message}`;
   console.error("Error fetching reviews via service:", e);
}
---

<Layout title="Dashboard">
  <section>
    <p>
      Welcome! You are logged in. (User ID: {userId})
    </p>
    <p>
      This is a protected page. You can only see this if you are logged in.
    </p>
    <a href="/api/auth/signout">Sign out</a>

    {fetchError && <p style="color: red;">{fetchError}</p>}

    <Reviews reviews={reviews} />
  </section>
</Layout>
```
---

`src/pages/index.astro`:
```
---
import Layout from "../layout/Layout.astro";
const title = "Supabase and Astro Demo";
---

<Layout title={title}>
  <main>
    <h1>{title}</h1>
    <ul>
      <li
      >
      </li>
       &plus;
      <li
      >
      </li>
    </ul>
    <p>This page was pre-rendered at build time</p>
  </main>
</Layout>

```
---

`src/pages/order.astro`:
```
---
// src/pages/order.astro
import Layout from "../layout/Layout.astro"; // Adjusted path if needed
// REMOVED: import { resetTurnstileWidget } from "../../scripts/formHandler"; // Moved to client script

const title = "Place Your Order";
// IMPORTANT: Use your *actual* Turnstile Site Key
const turnstileSiteKey = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY || "1x00000000000000000000AA"; // Fallback for local dev if needed
---

<Layout title={title}>
  <head>
    <script src="https://challenges.cloudflare.com/turnstile/v0/api.js" defer></script>
    <style>
      .hidden {
        display: none;
      }
      label {
        display: block;
        margin-top: 0.75rem;
        margin-bottom: 0.25rem;
        font-weight: bold;
      }
      input[type="text"], input[type="tel"], input[type="file"], input[type="range"] {
        width: 100%;
        padding: 0.5em;
        margin-bottom: 0.5rem;
        box-sizing: border-box;
      }
       .checkbox-group {
        display: flex;
        align-items: center;
        margin-top: 1rem;
      }
       .checkbox-group input[type="checkbox"] {
        margin-right: 0.5em;
        width: auto; /* Override default width */
      }
       .checkbox-group label {
         margin: 0; /* Override default margin */
         font-weight: normal;
       }
      #package-display-container {
        margin-top: 0.5rem;
        font-style: italic;
        font-weight: bold;
        min-height: 1.2em; /* Prevent layout shift */
      }
      #certificate-container {
          border-left: 3px solid #eee;
          padding-left: 1em;
          margin-left: 1.5em; /* Indent under checkbox */
          margin-top: 0.5rem;
      }
    </style>
  </head>
  <main>
    <section>
      <h1>{title}</h1>
      <p>Enter your details and upload your documents to start your order.</p>

      <form id="order-form" action="/api/orders/create" method="post" enctype="multipart/form-data">

        <div>
          <label for="order-files">Upload Documents:</label>
          <input
            type="file"
            id="order-files"
            name="order_files"
            multiple
            required
            accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png" /> {/* Adjust accepted types */}
          <small>You can select multiple files. Allowed types: PDF, DOC, DOCX, TXT, JPG, PNG.</small>
        </div>

        <div>
          <label for="orderer-name">Your Name:</label>
          <input
            type="text"
            id="orderer-name"
            name="orderer_name"
            required
            placeholder="Enter your full name"
          />
        </div>

        <div>
          <label for="phone">Phone Number:</label>
          <input
            required
            type="tel"
            id="phone"
            name="phone"
            placeholder="+62XXXXXXX or 08XXXXXXXX"
          />
        </div>

        <div>
            <label for="package-slider">Choose Package:</label>
            <input type="range" id="package-slider" name="package_tier_value" min="1" max="3" step="1" value="1" required />
            <div id="package-display-container">
                Selected Package: <span id="selected-package-display">Basic</span>
            </div>
        </div>

        <div class="checkbox-group">
           <input type="checkbox" id="is-disadvantaged" name="is_disadvantaged" />
           <label for="is-disadvantaged">I am of Economic Disadvantage</label>
        </div>
        {/* Container for conditional certificate upload */}
        <div id="certificate-container" class="hidden">
             <label for="certificate-file">Upload Certificate of Indigence:</label>
             <input
                type="file"
                id="certificate-file"
                name="certificate_file"
                accept=".pdf,.jpg,.jpeg,.png" /> {/* Adjust accepted types */}
        </div>

        <div class="checkbox-group">
            <input type="checkbox" id="is-school" name="is_school" />
            <label for="is-school">We are a school/body</label>
        </div>


        <!-- Turnstile Widget -->
        <div style="margin-top: 1.5rem;">
            <label>Verification:</label>
            <div
                class="cf-turnstile"
                data-sitekey={turnstileSiteKey}
            ></div>
        </div>
        <!-- End Turnstile Widget -->

        <div
          id="order-status"
          aria-live="polite"
          style="margin-top: 1rem; min-height: 1.5em; font-weight: bold;"
        >
        </div>

        <button
          type="submit"
          id="submit-order-button"
          style="margin-top: 1rem; padding: 0.8em 1.5em;"
          data-original-text="Submit Order"
        >
          Submit Order
        </button>
      </form>
    </section>
  </main>
</Layout>

<script>
  // Import for client-side script usage
  import { resetTurnstileWidget } from "../scripts/formHandler";

  // --- Element References ---
  const form = document.getElementById("order-form") as HTMLFormElement | null;
  const orderFilesInput = document.getElementById("order-files") as HTMLInputElement | null;
  const nameInput = document.getElementById("orderer-name") as HTMLInputElement | null;
  const phoneInput = document.getElementById("phone") as HTMLInputElement | null;
  const packageSlider = document.getElementById("package-slider") as HTMLInputElement | null;
  const packageDisplay = document.getElementById("selected-package-display") as HTMLSpanElement | null;
  const disadvantageCheckbox = document.getElementById("is-disadvantaged") as HTMLInputElement | null;
  const certificateContainer = document.getElementById("certificate-container") as HTMLDivElement | null;
  const certificateInput = document.getElementById("certificate-file") as HTMLInputElement | null;
  const schoolCheckbox = document.getElementById("is-school") as HTMLInputElement | null;
  const submitButton = document.getElementById("submit-order-button") as HTMLButtonElement | null;
  const statusDiv = document.getElementById("order-status") as HTMLElement | null;
  const turnstileResponseInputName = "cf-turnstile-response"; // Default name

  // --- Package Mapping (Client-side for display) ---
   const packageMap: { [key: string]: string } = {
      "1": "Basic",
      "2": "Standard",
      "3": "Premium",
   };

  // --- Event Listener Setup ---
  // Check if all essential elements exist before adding listeners
  if (form && orderFilesInput && nameInput && phoneInput && packageSlider && packageDisplay && disadvantageCheckbox && certificateContainer && certificateInput && schoolCheckbox && submitButton && statusDiv) {

    // 1. Slider Event Listener
    packageSlider.addEventListener('input', () => {
        // Type guard (optional but good practice if packageMap could be incomplete)
        const selectedValue = packageSlider.value;
        packageDisplay.textContent = packageMap[selectedValue] || 'Unknown';
    });

    // 2. Disadvantage Checkbox Listener
    disadvantageCheckbox.addEventListener('change', () => {
        if (disadvantageCheckbox.checked) {
            certificateContainer.classList.remove('hidden');
            certificateInput.required = true; // Make certificate required if box is checked
        } else {
            certificateContainer.classList.add('hidden');
            certificateInput.required = false;
            certificateInput.value = ''; // Clear input if unchecked
        }
    });

    // 3. Form Submit Listener
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      const originalButtonText = submitButton.dataset.originalText || "Submit Order";

      // --- Helper function for setting status ---
      const setStatus = (message: string, color: string = "inherit") => {
          if (statusDiv) { // Check statusDiv exists before using it
              statusDiv.textContent = message;
              statusDiv.style.color = color;
          } else {
              console.warn("Status display element not found."); // Fallback logging
          }
      };

      // --- Reset Status ---
      setStatus(""); // Clear previous status

      // --- Client-Side Validation ---
      // Add checks inside the handler for robustness and to satisfy TS
      if (!orderFilesInput || !disadvantageCheckbox || !certificateInput || !submitButton) {
          setStatus("Error: Form elements missing, cannot submit.", "red");
          console.error("Essential form elements missing during submit event.");
          return;
      }

      if (!orderFilesInput.files || orderFilesInput.files.length === 0) {
          setStatus("Please select at least one document file.", "red");
          orderFilesInput.focus();
          return;
      }
      if (disadvantageCheckbox.checked && (!certificateInput.files || certificateInput.files.length === 0)) {
           setStatus("Please upload the certificate of indigence.", "red");
           certificateInput.focus();
           return;
      }
      // Add more validation if needed (name, phone format etc.)


      // --- UI State: Start Submission ---
      submitButton.disabled = true;
      submitButton.textContent = "Initializing...";
      setStatus("Ensuring session...");


      try {
        // --- Step 1: Ensure Anonymous Auth Session ---
        const authResponse = await fetch("/api/auth/anonymous", { method: "POST" });
        if (!authResponse.ok) {
          let errorMsg = "Authentication setup failed.";
          try {
            const errorData = await authResponse.json();
            errorMsg = errorData.error || `Authentication setup failed (${authResponse.status})`;
          } catch (e) { /* Ignore parsing error if response wasn't JSON */ }
          throw new Error(errorMsg); // Throw to be caught by outer catch
        }
        console.log("Session ensured via server endpoint.");
        setStatus("Preparing order...");


        // --- Step 2: Construct FormData ---
        // Create FormData directly from the form element
        const formData = new FormData(form);


        // --- Step 3: Submit FormData to API ---
        submitButton.textContent = "Submitting Order...";
        setStatus("Submitting order (this may take a moment)...");

        const apiEndpoint = form.action;
        const response = await fetch(apiEndpoint, {
            method: "POST",
            body: formData,
            // IMPORTANT: Do NOT set Content-Type header when sending FormData with fetch
        });

        // --- Step 4: Handle API Response ---
        let responseData;
        try {
            // Check if response has content before trying to parse JSON
            const contentType = response.headers.get("content-type");
            if (response.ok && contentType && contentType.includes("application/json")) {
                responseData = await response.json();
            } else if (!response.ok) {
                // Try to parse JSON error even if status is bad
                if (contentType && contentType.includes("application/json")) {
                   responseData = await response.json();
                } else {
                   // Handle non-JSON errors (e.g., HTML error page)
                   const textResponse = await response.text();
                   throw new Error(`Server error: Status ${response.status}. Response: ${textResponse.substring(0, 100)}...`); // Show snippet
                }
            } else {
                 // Response OK but not JSON (unexpected but maybe valid case?)
                 console.warn("Response was OK but not valid JSON. Proceeding without response data.");
                 responseData = { id: "[N/A - Non-JSON Response]" }; // Placeholder
            }

        } catch (jsonError: any) {
             // Catch explicit JSON parsing errors or errors thrown above
             console.error("Error processing server response:", jsonError);
             throw new Error(`Failed to process server response: ${jsonError.message || "Unknown processing error"}`);
        }

        if (!response.ok) {
             // Use error message from parsed JSON body if available, otherwise default
             const errorMessage = responseData?.error || `Submission failed with status: ${response.status}`;
             throw new Error(errorMessage);
        }

        // --- Success ---
        setStatus(`Order submitted successfully! Order ID: ${responseData?.id || '[Unknown ID]'}`, "green");
        form.reset(); // Reset all form fields
        // Manually trigger updates needed after form.reset()
        if (packageSlider && packageDisplay) { // Add checks after reset
            packageDisplay.textContent = packageMap[packageSlider.value] || 'Unknown';
        }
        if (certificateContainer && certificateInput) { // Add checks after reset
            certificateContainer.classList.add('hidden');
            certificateInput.required = false;
        }
        resetTurnstileWidget(form); // Reset CAPTCHA
        setTimeout(() => { setStatus(""); }, 8000); // Clear message after delay


      } catch (error: any) {
        // --- Error Handling ---
        console.error("Order submission error:", error);
        setStatus(`Error: ${error.message || "An unexpected error occurred."}`, "red");
        resetTurnstileWidget(form); // Reset CAPTCHA on error too
        // Optional: Clear error message after a delay
        // setTimeout(() => { setStatus(''); }, 10000);

      } finally {
        // --- UI State: End Submission ---
        // Re-enable button and restore text regardless of success/error (check exists)
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.textContent = originalButtonText;
        }
      }
    });

  } else {
    // Log error if initial element finding failed
    console.error(
      "Could not find all required elements for the order form script. Check element IDs and ensure the DOM is ready.",
       { form, orderFilesInput, nameInput, phoneInput, packageSlider, packageDisplay, disadvantageCheckbox, certificateContainer, certificateInput, schoolCheckbox, submitButton, statusDiv } // Log which elements were found/not found
    );
    // Optionally display an error to the user if the form cannot initialize
    const errorDisplay = document.getElementById("order-status");
    if (errorDisplay) {
        errorDisplay.textContent = "Error initializing the order form. Please refresh the page.";
        errorDisplay.style.color = "red";
    }
  }
</script>
```
---

`src/pages/signin.astro`:
```
---
// src/pages/signin.astro
import Layout from "../layout/Layout.astro";
const title = "Sign In";
---

<Layout title={title}>
  <main>
    <section>
      <h1>{title}</h1>
      <p>
        Use Google to sign in to your account.
      </p>
      <form
        action="/api/auth/signin"
        method="post"
      >
        <button
          value="google"
          name="provider"
          type="submit"
        >
           Sign in with Google
        </button>
      </form>
    </section>
  </main>
</Layout>
```
---

`src/pages/api/auth/anonymous.ts`:
```
// src/pages/api/auth/anonymous.ts
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";
import { setAuthCookies } from '../../../utils/auth';
import { jsonResponse, jsonErrorResponse } from '../../../utils/apiResponse'; // <-- IMPORT ADDED
// Using constants for cookie names
import { ACCESS_TOKEN, REFRESH_TOKEN } from '../../../utils/constants';

export const POST: APIRoute = async ({ cookies }) => {
  // Check for *existing*, *valid* tokens before attempting a new anonymous sign-in.
  const existingAccessToken = cookies.get(ACCESS_TOKEN);
  const existingRefreshToken = cookies.get(REFRESH_TOKEN);

  if (existingAccessToken?.value && existingRefreshToken?.value) {
     console.log("Anonymous Route: Found existing tokens. Verifying session...");
     const { data: { user } } = await supabase.auth.getUser(existingAccessToken.value);
     if (user) {
        console.log(`Anonymous Route: Existing session is valid for user ${user.id}. Skipping new anonymous sign-in.`);
        // Use utility function for success response
        return jsonResponse(200, { message: "Already authenticated anonymously", userId: user.id }); // <-- UPDATED
     } else {
        console.log("Anonymous Route: Existing session token is invalid or expired. Proceeding with sign-in.");
     }
  } else {
      console.log("Anonymous Route: No existing auth tokens found or incomplete pair.");
  }

  console.log("Anonymous Route: Attempting server-side anonymous sign-in...");
  const { data, error } = await supabase.auth.signInAnonymously();

  if (error || !data?.session || !data?.user) {
    console.error("Anonymous Route: Server-side anonymous sign-in error:", error);
    // Use utility function for error response
    return jsonErrorResponse(500, error?.message || "Anonymous sign-in failed"); // <-- UPDATED
  }

  console.log(`Anonymous Route: Server-side anonymous sign-in successful for user ${data.user.id}. Setting cookies.`);

  setAuthCookies(cookies, data.session);

  // Use utility function for success response
  return jsonResponse(200, { message: "Anonymous sign-in successful", userId: data.user.id }); // <-- UPDATED
};
```
---

`src/pages/api/auth/callback.ts`:
```
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";
import { setAuthCookies } from '../../../utils/auth';
import { jsonErrorResponse } from '../../../utils/apiResponse'; // <-- IMPORT ADDED

export const GET: APIRoute = async ({ url, cookies, redirect }) => {
  const authCode = url.searchParams.get("code");

  if (!authCode) {
    // Use utility function for error response
    return jsonErrorResponse(400, "No code provided"); // <-- UPDATED
  }

  const { data, error } = await supabase.auth.exchangeCodeForSession(authCode);

  if (error) {
    console.error("Auth Callback Error:", error.message);
    // Use utility function for error response
    return jsonErrorResponse(500, error.message); // <-- UPDATED
  }

  if (!data.session) {
      console.error("Auth Callback Error: No session data returned after code exchange.");
      // Use utility function for error response
      return jsonErrorResponse(500, "Failed to establish session."); // <-- UPDATED
  }

  setAuthCookies(cookies, data.session);

  // Redirect remains unchanged
  return redirect("/dashboard");
};
```
---

`src/pages/api/auth/signin.ts`:
```
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase";
import type { Provider } from "@supabase/supabase-js";
import { CALLBACK_PATH } from "../../../utils/constants";
import { jsonErrorResponse } from '../../../utils/apiResponse'; // <-- IMPORT ADDED

export const POST: APIRoute = async ({ request, cookies, redirect, url }) => {
  const formData = await request.formData();
  const provider = formData.get("provider")?.toString();

  const redirectUrl = `${url.origin}${CALLBACK_PATH}`;

  if (provider === "google") {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: provider as Provider,
      options: {
        redirectTo: redirectUrl,
      },
    });

    if (error) {
      console.error("OAuth Error:", error.message);
      // Use utility function for error response
      return jsonErrorResponse(500, error.message); // <-- UPDATED
    }

    // Redirect remains unchanged
    return redirect(data.url);
  }
  // Use utility function for error response
  return jsonErrorResponse(400, "Invalid sign-in method"); // <-- UPDATED
};
```
---

`src/pages/api/auth/signout.ts`:
```
import type { APIRoute } from "astro";
import { deleteAuthCookies } from '../../../utils/auth'; // <-- IMPORT ADDED

export const GET: APIRoute = async ({ cookies, redirect }) => {
  // Use the utility function to delete cookies
  deleteAuthCookies(cookies); // <-- REPLACED manual deletes

  return redirect("/signin");
};
```
---

`src/pages/api/guestbook/index.ts`:
```
// src/pages/api/guestbook/index.ts
import type { APIRoute } from "astro";
import { getAllGuestbookEntries, createGuestbookEntry } from "../../../services/guestbook.service";
import type { GuestbookEntry } from "../../../types/types";
import { jsonResponse, jsonErrorResponse } from '../../../utils/apiResponse';

// GET handler remains unchanged
export const GET: APIRoute = async () => {
  console.log("API Route: GET /api/guestbook invoked.");
  try {
    const entries = await getAllGuestbookEntries();
    return jsonResponse(200, entries);
  } catch (error: any) {
    console.error("API Error (GET /api/guestbook):", error.message);
    return jsonErrorResponse(500, "Failed to retrieve guestbook entries.");
  }
};

export const POST: APIRoute = async ({ request, locals }) => {
  console.log("API Route: POST /api/guestbook invoked.");

  // --- OPTIMIZATION ---
  // The middleware already ensures that locals.userId is present for this route.
  // We can safely use the non-null assertion operator (!).
  // The redundant check 'if (!userId) { ... }' has been removed.
  const userId = locals.userId!;
  console.log(`API Route: User authenticated via middleware. User ID: ${userId}. Ready to create guestbook entry.`);
  // --- END OPTIMIZATION ---

  try {
    let name: string;
    let message: string;
    try {
        const body: Partial<GuestbookEntry> = await request.json();
        name = body.name?.toString().trim() ?? '';
        message = body.message?.toString().trim() ?? '';

        if (!name || !message) {
            console.log("API Error: Missing or empty name or message in request body.");
            return jsonErrorResponse(400, "Bad Request: Name and message are required and cannot be empty.");
        }
    } catch (e) {
        console.log("API Error: Invalid JSON body received.");
        return jsonErrorResponse(400, "Bad Request: Invalid JSON body.");
    }

    // Note: userId isn't directly used by createGuestbookEntry in this example,
    // but it confirms the user is authenticated as required by the middleware.
    const newEntry = await createGuestbookEntry(name, message);

    console.log("API Route: Guestbook entry created successfully.");
    return jsonResponse(201, newEntry);

  } catch (error: any) {
    console.error("API Error (POST /api/guestbook):", error.message);

    // Error handling remains the same
    if (error.message.startsWith("Validation Error:")) {
         return jsonErrorResponse(400, error.message);
    }
    if (error.message.startsWith("Permission Denied:")) {
         return jsonErrorResponse(403, error.message);
    }
     if (error.message.startsWith("Database Error:")) {
         return jsonErrorResponse(500, "Failed to submit guestbook entry due to a server error.");
     }
    return jsonErrorResponse(500, "An unexpected error occurred while submitting the guestbook entry.");
  }
};
```
---

`src/pages/api/orders/create.ts`:
```
// src/pages/api/orders/create.ts
import type { APIRoute } from "astro";
import { supabase } from "../../../lib/supabase"; // Direct import for storage
import { createOrder } from "../../../services/order.service";
import { verifyTurnstileToken } from '../../../utils/turnstile';
import { jsonResponse, jsonErrorResponse } from '../../../utils/apiResponse';
import { sanitizeFilename } from "../../../utils/filenameUtils"; // Assuming you create this utility

// Helper function to generate a random suffix
const generateRandomSuffix = (length = 6) => Math.random().toString(36).substring(2, 2 + length);

// --- API Route Handler ---
export const POST: APIRoute = async ({ request, locals, clientAddress }) => {
  console.log("API Route: POST /api/orders/create invoked.");

  // --- Authentication Check (Middleware Guarantee) ---
  const userId = locals.userId!; // Asserting non-null based on middleware guarantee
  console.log(`API Route: User authenticated via middleware. User ID: ${userId}`);

  // --- FormData Parsing ---
  let formData: FormData;
  try {
    formData = await request.formData();
  } catch (error: any) {
    console.error("API Error: Failed to parse FormData.", error);
    return jsonErrorResponse(400, "Bad Request: Invalid form data.");
  }

  // --- Data Extraction from FormData ---
  const ordererName = formData.get("orderer_name")?.toString().trim();
  const phone = formData.get("phone")?.toString().trim();
  const packageSliderValue = formData.get("package_tier_value")?.toString(); // e.g., "1", "2"
  const isDisadvantaged = formData.get("is_disadvantaged") === "on"; // Checkbox value is 'on' when checked
  const isSchool = formData.get("is_school") === "on";
  const turnstileToken = formData.get("cf-turnstile-response")?.toString();
  const orderFiles = formData.getAll("order_files") as File[]; // Array of File objects
  const certificateFile = formData.get("certificate_file") as File | null; // Single File or null

  // --- Basic Validation ---
  if (!ordererName) {
    return jsonErrorResponse(400, "Bad Request: Orderer name is required.");
  }
  if (!packageSliderValue) {
    return jsonErrorResponse(400, "Bad Request: Package selection is required.");
  }
  if (!turnstileToken) {
    return jsonErrorResponse(400, "Bad Request: CAPTCHA token is missing.");
  }
  if (!orderFiles || orderFiles.length === 0 || orderFiles.some(f => f.size === 0)) {
     return jsonErrorResponse(400, "Bad Request: At least one main document file is required.");
  }
  if (isDisadvantaged && (!certificateFile || certificateFile.size === 0)) {
     return jsonErrorResponse(400, "Bad Request: Certificate of indigence is required when economic disadvantage is checked.");
  }
  if (!isDisadvantaged && certificateFile && certificateFile.size > 0) {
      console.warn("API Warning: Certificate file provided but disadvantage checkbox not checked. Ignoring certificate.");
      // Optionally clear certificateFile here if strict adherence is needed
  }


  // --- Map Slider Value to Tier Name (Example Mapping) ---
  const packageTiers: { [key: string]: string } = {
    "1": "Basic",
    "2": "Standard",
    "3": "Premium",
    // Add more tiers as needed
  };
  const packageTier = packageTiers[packageSliderValue];
  if (!packageTier) {
      return jsonErrorResponse(400, "Bad Request: Invalid package selection value.");
  }


  // --- Turnstile Verification ---
  try {
    console.log("API Route: Verifying Turnstile token...");
    const forwardedIp = request.headers.get('x-nf-client-connection-ip');
    const remoteIp = forwardedIp || clientAddress;
    await verifyTurnstileToken(turnstileToken, remoteIp);
    console.log("API Route: Turnstile verification successful.");
  } catch (error: any) {
    console.warn("API Route: Turnstile verification failed.", error.message);
    if (error.message.startsWith("Server configuration error")) {
        return jsonErrorResponse(500, error.message);
    }
    return jsonErrorResponse(403, `CAPTCHA verification failed: ${error.message}`);
  }

  // --- File Upload Logic (Upload First Strategy) ---
  const uploadedFilePaths: string[] = [];
  let certificatePath: string | undefined = undefined;
  const timestamp = Date.now();

  try {
    console.log(`API Route: Uploading ${orderFiles.length} main document(s)...`);
    for (const file of orderFiles) {
        if (file.size === 0) continue; // Skip empty file placeholders if any
        const sanitizedName = sanitizeFilename(file.name);
        const randomSuffix = generateRandomSuffix();
        const filePath = `${userId}/${timestamp}-${randomSuffix}-${sanitizedName}`;

        console.log(`API Route: Uploading ${file.name} to ${filePath}`);
        const { error: uploadError } = await supabase.storage
          .from("documents")
          .upload(filePath, file);

        if (uploadError) {
            console.error(`API Error: Failed to upload ${file.name}. Error:`, uploadError);
            // ABORT on first failure of a main document
            // Note: Files uploaded before this error are now orphaned.
            return jsonErrorResponse(500, `Server Error: Failed to upload file '${file.name}'. ${uploadError.message}`);
        }
        uploadedFilePaths.push(filePath);
        console.log(`API Route: Successfully uploaded ${file.name}`);
    }

    // Upload certificate file if applicable
    if (isDisadvantaged && certificateFile && certificateFile.size > 0) {
        console.log("API Route: Uploading certificate file...");
        const sanitizedName = sanitizeFilename(certificateFile.name);
        const randomSuffix = generateRandomSuffix();
        const certFilePath = `${userId}/${timestamp}-certificate-${randomSuffix}-${sanitizedName}`;

        console.log(`API Route: Uploading ${certificateFile.name} to ${certFilePath}`);
        const { error: certUploadError } = await supabase.storage
            .from("documents")
            .upload(certFilePath, certificateFile);

        if (certUploadError) {
             console.error(`API Error: Failed to upload certificate ${certificateFile.name}. Error:`, certUploadError);
             // Decide: Abort or continue without certificate? Let's abort for consistency.
             // Note: Main files uploaded before this are now orphaned.
             return jsonErrorResponse(500, `Server Error: Failed to upload certificate file '${certificateFile.name}'. ${certUploadError.message}`);
        }
        certificatePath = certFilePath;
        console.log(`API Route: Successfully uploaded certificate ${certificateFile.name}`);
    }

    console.log("API Route: All required file uploads completed successfully.");

  } catch (error: any) {
      // Catch any unexpected errors during the upload loops
      console.error("API Error: Unexpected error during file upload process.", error);
      return jsonErrorResponse(500, `Server Error: An unexpected error occurred during file processing. ${error.message}`);
  }


  // --- Database Interaction (Only if all uploads succeeded) ---
  try {
    console.log(`API Route: Calling createOrder service for user ${userId} with name ${ordererName}`);

    // Note: pageCount and totalPrice are undefined here as we aren't calculating them yet.
    const newOrder = await createOrder(
        userId,
        ordererName,
        phone,
        packageTier,
        isDisadvantaged,
        isSchool,
        uploadedFilePaths,
        certificatePath,
        undefined, // pageCount - deferred
        undefined  // totalPrice - deferred
    );

    console.log("API Route: Order created successfully in database:", newOrder.id);
    return jsonResponse(201, newOrder); // Return the created order object

  } catch (error: any) {
    // Handle errors from the createOrder service (validation, DB errors)
    console.error("API Error (POST /api/orders/create - Service Call):", error.message);
    // Note: Files are already uploaded and potentially orphaned if DB insert fails.
    if (error.message.startsWith("Validation Error:")) {
        return jsonErrorResponse(400, error.message);
    }
    if (error.message.startsWith("Database Error:")) {
         return jsonErrorResponse(500, "Failed to save order details after uploading files.");
    }
    // Catch specific DB constraint errors if needed (e.g., duplicate order check)
    return jsonErrorResponse(500, `An unexpected server error occurred while saving the order: ${error.message}`);
  }
};
```
---

`src/scripts/formHandler.ts`:
```
// src/utils/formHandler.ts
import type { FormSubmitOptions } from '../types/types';

export async function submitFormData(options: FormSubmitOptions): Promise<void> {
  const {
    formElement, // Needed for reset on success
    statusElement,
    submitButton,
    preparePayload,
    onSuccess,
    onError,
    endpoint = formElement.action,
    method = formElement.method || 'POST',
    submittingText = 'Submitting...',
    submitText = submitButton?.dataset.originalText || 'Submit', // Use data attribute or default
  } = options;

  // Store original text if not already done
  if (submitButton && !submitButton.dataset.originalText) {
      submitButton.dataset.originalText = submitButton.textContent || 'Submit';
  }
  const originalButtonText = submitButton?.dataset.originalText || 'Submit';

  // Clear previous status
  if (statusElement) {
    statusElement.textContent = '';
    statusElement.style.color = 'inherit';
  }

  // Prepare payload - validation happens here
  const payload = preparePayload();
  if (payload === null) {
    // Validation failed, message should be handled by preparePayload/onError caller
    // Ensure button is re-enabled if it was disabled before this check
     if (submitButton && submitButton.disabled) {
        submitButton.disabled = false;
        submitButton.textContent = originalButtonText;
     }
    return; // Exit early
  }

  // Manage UI state: Disable button
  if (submitButton) {
    submitButton.disabled = true;
    submitButton.textContent = submittingText;
  }

  try {
    const response = await fetch(endpoint, {
      method: method.toUpperCase(),
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    let data;
    try {
      // Attempt to parse JSON, works even for errors if body is JSON
      data = await response.json();
    } catch (jsonError) {
      // Handle cases where response is not JSON (e.g., 500 HTML error page)
      if (!response.ok) {
        // Throw generic HTTP error if parsing failed on an error response
        throw new Error(`HTTP error! Status: ${response.status}, Response not JSON.`);
      }
      // If response was ok but not JSON, might be unexpected. Log and treat as success with no data.
      console.warn("Response was OK but not valid JSON.");
      data = null; // Success, but no data parsed
    }

    if (!response.ok) {
      // Use error message from parsed JSON body if available, otherwise default
      const errorMessage = data?.error || `HTTP error! Status: ${response.status}`;
      throw new Error(errorMessage);
    }

    // Call the success callback
    onSuccess(data, formElement);

  } catch (error: any) {
    console.error('Form submission error:', error);
    // Call the error callback
    onError(error, statusElement);
    // Note: error is not re-thrown here, allowing the flow to complete in finally.
    // The onError callback is responsible for user feedback.

  } finally {
    // Re-enable button and restore text in finally block to ensure it always happens
    if (submitButton) {
      submitButton.disabled = false;
      submitButton.textContent = originalButtonText;
    }
  }
}

/**
 * Sets up a standard event listener for form submission that calls submitFormData.
 * Use this for simple forms without pre-submission steps like auth checks.
 * @param options - Configuration for the form submission.
 */
export function setupFormSubmitListener(options: FormSubmitOptions): void {
   const { formElement } = options;
   if (!formElement) {
       console.error('Form submission listener requires a formElement.');
       return;
   }

   formElement.addEventListener('submit', async (event) => {
        event.preventDefault();
        // Directly call the async submission logic
        await submitFormData(options);
   });
}

/**
 * Helper function to reset a Cloudflare Turnstile widget within a given form.
 * @param formElement - The form containing the Turnstile widget.
 */
export function resetTurnstileWidget(formElement: HTMLFormElement | null): void {
    if (!formElement) return;
    try {
        // Find the widget using its class
        const widgetElement = formElement.querySelector<HTMLElement>('.cf-turnstile');
        if (widgetElement && typeof (window as any).turnstile?.reset === 'function') {
           (window as any).turnstile.reset(widgetElement);
           console.log("Turnstile widget reset.");
        }
    } catch (e) {
        console.warn("Could not reset Turnstile widget", e);
    }
}
```
---

`src/services/guestbook.service.ts`:
```
// src/services/guestbook.service.ts
import { supabase } from '../lib/supabase'; // Import the initialized client
import type { GuestbookEntry } from '../types/types'; // Use our defined type
import { handleSupabaseError } from '../utils/supabaseUtils'; // <-- IMPORT ADDED

/**
 * Fetches all guestbook entries, ordered by creation date (ascending).
 * Throws an error if the Supabase query fails.
 */
export async function getAllGuestbookEntries(): Promise<GuestbookEntry[]> {
  const operationContext = "fetch guestbook entries";
  console.log(`Service: ${operationContext}...`);

  const { data, error } = await supabase
    .from("guestbook")
    .select("name, message") // Select only needed fields defined in the type
    .order("created_at", { ascending: true }); // Or false based on desired display order

  // Use the utility function to handle potential errors
  handleSupabaseError(error, operationContext); // <-- REPLACED if(error) block

  // If handleSupabaseError didn't throw, the operation was successful (though data might be empty)
  console.log("Service: Fetched entries successfully.");
  return data as GuestbookEntry[];
}

/**
 * Creates a new guestbook entry.
 * Throws an error if validation fails or the Supabase insert operation fails.
 * @param name - The name of the poster.
 * @param message - The message content.
 * @returns The newly created guestbook entry (only name and message).
 */
export async function createGuestbookEntry(name: string, message: string): Promise<GuestbookEntry> {
  // Basic validation within the service (remains unchanged)
  if (!name || !message || name.trim().length === 0 || message.trim().length === 0) {
      throw new Error("Validation Error: Name and message cannot be empty.");
  }

  const trimmedName = name.trim();
  const trimmedMessage = message.trim();
  const operationContext = "create guestbook entry";

  console.log(`Service: Creating guestbook entry for '${trimmedName}'...`);
  const { data, error } = await supabase
    .from("guestbook")
    .insert({ name: trimmedName, message: trimmedMessage })
    .select("name, message") // Select the fields matching GuestbookEntry type
    .single(); // Expecting a single row back after insert

  // Use the utility function to handle potential errors
  handleSupabaseError(error, operationContext); // <-- REPLACED if(error) block

  // If handleSupabaseError didn't throw, check if data was returned (safeguard)
  if (!data) {
      // This case should ideally not be reached if insert succeeded without error,
      // but acts as a safeguard.
      throw new Error(`Database Error: Failed to ${operationContext}: No data returned after insert.`);
  }

  console.log("Service: Created entry successfully.");
  return data as GuestbookEntry; // Return data matching the type
}
```
---

`src/services/order.service.ts`:
```
// src/services/order.service.ts
import { supabase } from '../lib/supabase';
import type { Order } from '../types/types'; // Import the Order type
import { handleSupabaseError } from '../utils/supabaseUtils';

/**
 * Creates a new order associated with a user ID.
 * Throws an error if validation fails or the Supabase insert operation fails.
 * @param userId - The authenticated user's ID (can be anonymous user ID).
 * @param ordererName - The name provided for the order.
 * @param phone - Optional phone number.
 * @param packageTier - Text representation of the selected package.
 * @param isDisadvantaged - Boolean flag.
 * @param isSchool - Boolean flag.
 * @param uploadedFileUrls - Array of paths/URLs for main documents.
 * @param certificateUrl - Optional path/URL for the certificate.
 * @param pageCount - Optional page count.
 * @param totalPrice - Optional total price.
 * @returns The newly created order data.
 */
export async function createOrder(
    userId: string,
    ordererName: string,
    phone: string | undefined,
    packageTier: string | undefined,
    isDisadvantaged: boolean,
    isSchool: boolean,
    uploadedFileUrls: string[] | undefined,
    certificateUrl: string | undefined,
    // Optional fields, calculation deferred
    pageCount: number | undefined,
    totalPrice: number | undefined
): Promise<Order> {

    // Basic validation
    if (!userId || !ordererName || ordererName.trim().length === 0) {
        throw new Error("Validation Error: User ID and a non-empty Orderer Name are required to create an order.");
    }

    const trimmedOrdererName = ordererName.trim();
    const trimmedPhone = phone?.trim() || undefined;
    const operationContext = "create order";

    console.log(`Service: Creating order for user '${userId}' with name '${trimmedOrdererName}', package '${packageTier || 'N/A'}', phone '${trimmedPhone || 'N/A'}'. Disadvantaged: ${isDisadvantaged}, School: ${isSchool}`);

    // Prepare data for insertion based on the Order type
    const insertData: Partial<Order> & { user_id: string; orderer_name: string; status: Order['status']; is_disadvantaged: boolean; is_school: boolean; } = {
      user_id: userId,
      orderer_name: trimmedOrdererName,
      status: "pending", // Set default status
      is_disadvantaged: isDisadvantaged,
      is_school: isSchool,
      // Map optional fields only if they have a value
      ...(trimmedPhone && { phone: trimmedPhone }),
      ...(packageTier && { package_tier: packageTier }),
      ...(uploadedFileUrls && { uploaded_file_urls: uploadedFileUrls }),
      ...(certificateUrl && { certificate_url: certificateUrl }),
      ...(pageCount !== undefined && pageCount !== null && { page_count: pageCount }),
      ...(totalPrice !== undefined && totalPrice !== null && { total_price: totalPrice }),
    };

    console.log("Service: Inserting data:", insertData); // Log the object being sent to Supabase

    const { data, error } = await supabase
      .from("orders")
      .insert(insertData)
      .select() // Select all fields defined in the Order type
      .single(); // Expecting one row back

    // Use the utility function to handle potential errors
    handleSupabaseError(error, operationContext);

     // If handleSupabaseError didn't throw, check if data was returned (safeguard)
     if (!data) {
      // Safeguard against unexpected null data after successful insert
      throw new Error(`Database Error: Failed to ${operationContext}: No data returned after insert.`);
     }

    console.log("Service: Created order successfully with ID:", data.id);
    return data as Order;
}

// Potential future functions:
// export async function getOrderById(orderId: number): Promise<Order | null> { ... }
// export async function updateOrderStatus(orderId: number, status: Order['status']): Promise<Order> { ... }
// export async function getOrdersByUserId(userId: string): Promise<Order[]> { ... }
```
---

`src/types/types.ts`:
```
// src/types/types.ts

// Existing GuestbookEntry type
export interface GuestbookEntry {
  name: string;
  message: string;
  // Consider adding id and created_at if you fetch/use them
  // id?: number | string;
  // created_at?: string;
}

// Updated Order type
export interface Order {
  id: number; // Or string if you use UUIDs
  user_id: string; // Foreign key to auth.users
  orderer_name: string;
  status: "pending" | "processing" | "completed" | "cancelled"; // Example statuses
  created_at: string; // ISO timestamp string
  phone?: string | null;
  package_tier?: string | null; // Text representation, e.g., "Basic", "Standard"
  page_count?: number | null; // Optional for now
  total_price?: number | null; // Optional for now, Assuming bigint maps to number safely for JS
  uploaded_file_urls?: string[] | null; // Array of storage paths/URLs for main documents
  is_disadvantaged: boolean; // ADDED
  is_school: boolean; // ADDED
  certificate_url?: string | null; // ADDED: Path/URL for the certificate file
  // Add any other relevant fields from your orders table
}

// FormSubmitOptions interface remains unchanged - but NOTE it won't be used by order.astro directly
export interface FormSubmitOptions {
  formElement: HTMLFormElement;
  statusElement: HTMLElement | null;
  submitButton: HTMLButtonElement | null;
  // Function to extract and validate data before sending
  // Returns null if validation fails and status should not proceed.
  preparePayload: () => Record<string, any> | null;
  // Callbacks for custom actions on success/error
  onSuccess: (data: any, formElement: HTMLFormElement) => void;
  onError: (error: Error, statusElement: HTMLElement | null) => void;
  // Optional: Use form's action/method by default if not provided
  endpoint?: string;
  method?: string;
  // Optional: Customize button text during submission
  submittingText?: string;
  submitText?: string; // Optional: Text to restore button to (defaults to initial text)
}
```
---

`src/utils/apiResponse.ts`:
```
// src/utils/apiResponse.ts
import type { APIContext } from 'astro';

const commonHeaders = {
    'Content-Type': 'application/json',
};

/**
 * Creates a standardized JSON success response.
 * @param status - HTTP status code (e.g., 200, 201).
 * @param data - The payload to be stringified and sent.
 * @returns A Response object.
 */
export function jsonResponse(status: number, data: any): Response {
    return new Response(JSON.stringify(data), {
        status: status,
        headers: commonHeaders,
    });
}

/**
 * Creates a standardized JSON error response.
 * @param status - HTTP status code (e.g., 400, 401, 403, 404, 500).
 * @param message - The error message.
 * @returns A Response object with { error: message } payload.
 */
export function jsonErrorResponse(status: number, message: string): Response {
    return new Response(JSON.stringify({ error: message }), {
        status: status,
        headers: commonHeaders,
    });
}

// Example of a more detailed error structure if needed in the future:
/*
export function jsonDetailedErrorResponse(status: number, message: string, details?: any): Response {
    return new Response(JSON.stringify({ error: { message, details } }), {
        status: status,
        headers: commonHeaders,
    });
}
*/
```
---

`src/utils/auth.ts`:
```
// src/utils/auth.ts
import type { Session } from '@supabase/supabase-js';
import type { AstroCookies } from 'astro';
import { ACCESS_TOKEN, REFRESH_TOKEN } from './constants'; // <-- IMPORT ADDED

/**
 * Sets the Supabase access and refresh token cookies with consistent security attributes.
 * @param cookies - The Astro cookies object from APIContext or MiddlewareAPIContext.
 * @param session - The Supabase session object containing tokens and expiration info.
 */
export function setAuthCookies(cookies: AstroCookies, session: Session | null | undefined): void {
  // Ensure we have a session and tokens before proceeding
  if (!session?.access_token || !session?.refresh_token) {
      console.warn("setAuthCookies called without a valid session or tokens. Skipping cookie setting.");
      return;
  }

  const { access_token, refresh_token, expires_in } = session;

  const baseCookieOptions = {
    path: "/",
    sameSite: "lax" as const,
    secure: import.meta.env.PROD,
    httpOnly: true,
  };

  const rawAccessTokenMaxAge = (expires_in != null && expires_in > 0) ? expires_in : 3600;
  const accessTokenMaxAge = Math.floor(rawAccessTokenMaxAge);

  const refreshTokenMaxAge = 60 * 60 * 24 * 7; // 7 days in seconds

  if (accessTokenMaxAge <= 0) {
      console.warn(`Calculated accessTokenMaxAge is invalid (${accessTokenMaxAge}). Using default 3600.`);
  }

  console.log(`Setting auth cookies. Access token maxAge: ${accessTokenMaxAge}s`);

  // Use constants for cookie names
  cookies.set(ACCESS_TOKEN, access_token, { // <-- UPDATED
    ...baseCookieOptions,
    maxAge: accessTokenMaxAge,
  });

  cookies.set(REFRESH_TOKEN, refresh_token, { // <-- UPDATED
    ...baseCookieOptions,
    maxAge: refreshTokenMaxAge,
  });
}

/**
 * Deletes the Supabase authentication cookies.
 * @param cookies - The Astro cookies object.
 */
export function deleteAuthCookies(cookies: AstroCookies): void {
    console.log("Deleting auth cookies.");
    // Use constants for cookie names
    cookies.delete(ACCESS_TOKEN, { path: "/" }); // <-- UPDATED
    cookies.delete(REFRESH_TOKEN, { path: "/" }); // <-- UPDATED
}
```
---

`src/utils/constants.ts`:
```
// src/constants.ts

// Cookie Names
export const ACCESS_TOKEN = "sb-access-token";
export const REFRESH_TOKEN = "sb-refresh-token";

// API Paths
export const CALLBACK_PATH = "/api/auth/callback";

// External Services Endpoints
export const TURNSTILE_VERIFY = 'https://challenges.cloudflare.com/turnstile/v0/siteverify';

// Add other constants here as needed, e.g.:
// export const PROTECTED_PATHS = ["/dashboard"];
// export const REDIRECT_PATHS = ["/signin"];
// export const PROTECTED_API_PATHS = ["/api/guestbook", "/api/orders/create"];
```
---

`src/utils/filenameUtils.ts`:
```
export function sanitizeFilename(filename: string): string {
    // 1. Replace known problematic characters (add more as needed)
    let sanitized = filename.replace(/[\s<>:"/\\|?*]+/g, '_');
    // 2. Remove leading/trailing underscores/dots
    sanitized = sanitized.replace(/^[_.]+|[_.]+$/g, '');
    // 3. Limit length (optional)
    const maxLength = 100;
    if (sanitized.length > maxLength) {
      const extDotIndex = sanitized.lastIndexOf('.');
      if (extDotIndex > 0) {
        const name = sanitized.substring(0, extDotIndex);
        const ext = sanitized.substring(extDotIndex);
        sanitized = name.substring(0, maxLength - ext.length) + ext;
      } else {
        sanitized = sanitized.substring(0, maxLength);
      }
    }
    // 4. Handle empty filenames after sanitization
    if (!sanitized) {
      return 'untitled';
    }
    return sanitized;
  }
```
---

`src/utils/supabaseUtils.ts`:
```
// src/utils/supabaseUtils.ts
import type { PostgrestError } from '@supabase/supabase-js';

/**
 * Handles common Supabase Postgrest errors, logs them, and throws standardized Error objects.
 *
 * @param error - The PostgrestError object returned from a Supabase query, or null/undefined if no error occurred.
 * @param context - A string describing the operation context (e.g., "fetch guestbook entries", "create order") for clearer error messages.
 * @throws {Error} Throws a standardized error ('Permission Denied', 'Database Error') if the input `error` is not null/undefined.
 */
export function handleSupabaseError(error: PostgrestError | null | undefined, context: string): void {
  if (!error) {
    // No error occurred, do nothing.
    return;
  }

  // Log the original error for debugging purposes
  console.error(`Service Error (${context}):`, error);

  // Handle specific, known error codes
  if (error.code === '42501') { // RLS violation
    throw new Error(`Permission Denied: Cannot ${context}. Check RLS policies.`);
  }

  // Handle other database-related errors generically
  // Add more specific error code checks here if needed in the future
  // e.g., if (error.code === '23505') { throw new Error(`Database Error: Unique constraint violation during ${context}.`); }

  // Fallback for any other database error
  throw new Error(`Database Error: Failed to ${context}: ${error.message}`);
}
```
---

`src/utils/turnstile.ts`:
```
// src/utils/turnstile.ts
import { TURNSTILE_VERIFY } from './constants'; // Assuming you move the constant here
import { jsonErrorResponse } from './apiResponse'; // Or just throw errors

const TURNSTILE_SECRET_KEY = import.meta.env.TURNSTILE_SECRET_KEY;

/**
 * Verifies a Cloudflare Turnstile token.
 * Throws an error if verification fails or if the server is misconfigured.
 *
 * @param token - The `cf-turnstile-response` token from the client.
 * @param remoteIp - The client's IP address (optional but recommended).
 * @throws {Error} If the secret key is missing, the fetch fails, or verification is unsuccessful.
 */
export async function verifyTurnstileToken(token: string, remoteIp?: string): Promise<void> {
    if (!TURNSTILE_SECRET_KEY) {
        console.error("Turnstile Verification Error: TURNSTILE_SECRET_KEY is not set.");
        // Throw an error that the API route can catch and translate to a 500
        throw new Error("Server configuration error: CAPTCHA secret missing.");
    }

    if (!token) {
         throw new Error("CAPTCHA token is missing."); // Or handle this validation earlier
    }

    console.log("Util: Verifying Turnstile token...");
    const verifyPayload = new URLSearchParams();
    verifyPayload.append('secret', TURNSTILE_SECRET_KEY);
    verifyPayload.append('response', token);

    if (remoteIp) {
        verifyPayload.append('remoteip', remoteIp);
        console.log("Util: Verifying Turnstile with remoteip:", remoteIp);
    } else {
        console.warn("Util: Verifying Turnstile without remoteip.");
    }

    try {
        const verifyResponse = await fetch(TURNSTILE_VERIFY, {
            method: 'POST',
            body: verifyPayload,
        });

        if (!verifyResponse.ok) {
             // Handle non-2xx responses from Cloudflare endpoint
             throw new Error(`Turnstile endpoint returned status ${verifyResponse.status}`);
        }

        const verifyOutcome = await verifyResponse.json();
        console.log("Util: Turnstile verification outcome:", verifyOutcome);

        if (!verifyOutcome.success) {
            // Throw a specific error that the API route can catch
            throw new Error(`Verification failed. Codes: ${(verifyOutcome['error-codes'] || []).join(', ')}`);
        }

        console.log("Util: Turnstile verification successful for hostname:", verifyOutcome.hostname);
        // If successful, the function completes without returning anything (void)

    } catch (error: any) {
        console.error("Util Error: Exception during Turnstile verification fetch:", error);
        // Re-throw or throw a new standardized error
        throw new Error(`Server error during CAPTCHA verification: ${error.message}`);
    }
}
```
---
